import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Pre-auth RCE in Oracle Access Manager''',
        "description": '''Vulnerability in the Oracle Access Manager product of Oracle Fusion Middleware (component: OpenSSO Agent). Supported versions that are affected are 11.1.2.3.0, 12.2.1.3.0 and 12.2.1.4.0. Easily exploitable vulnerability allows unauthenticated attacker with network access via HTTP to compromise Oracle Access Manager. Successful attacks of this vulnerability can result in takeover of Oracle Access Manager.''',
        "severity": "critical",
        "references": [
            "https://testbnull.medium.com/oracle-access-manager-pre-auth-rce-cve-2021-35587-analysis-1302a4542316", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-35587"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "9.8",
            "cve-id": "CVE-2021-35587",
            "cwe-id": "CWE-502"
        },
        "metadata":{
            "vuln-target": "",
            "fofa-query":'''body="/oam/pages/css/login_page.css"''',
        },
        "tags": ["oam", "rce", "java", "unauth"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = "/oam/server/opensso/sessionservice"
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36',}
        resp = requests.get(url=url+path,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if resp.status_code == 200 and ("x-oracle-dms-ecid" in str(resp.headers) or "x-oracle-dms-rid" in str(resp.headers)) and "/oam/pages/css/general.css" in resp.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url